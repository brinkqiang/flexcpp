// Generated by Bisonc++ V2.09.04 on Mon, 16 Jan 2012 21:40:37 +0100

#ifndef Parser_h_included
#define Parser_h_included

#include <vector>

#include "../state/state.h"
#include "../block/block.h"


// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "../scanner/scanner.h"

namespace FBB
{
    class Arg;
}

class Options;
class States;
class Rules;

#undef Parser
class Parser: public ParserBase
{
    FBB::Arg &d_arg;

    // $insert scannerobject
    Scanner d_scanner;
    std::string const &d_matched;   // text matched at the last lex() call.
    Block   d_block;

    Options &d_options;

    std::string d_msg;
    bool d_printTokens;
    bool d_doError;                 // use the error() function at ERRORs

    Rules &d_rules;
    States &d_states;

    static int s_ignoreToken;
    static std::string s_lastMsg;

    public:
        Parser(Rules &rules, States &states);
        int parse();

    private:
        spSemUnion eofPattern();

        void block();
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};

#endif







