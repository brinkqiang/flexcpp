pattern:
    EOF_PATTERN
    {
        $$ = eofPattern();
    }
|
    STRING
    {                                                   
        $$ = PatternVal::str(d_states,
                        d_scanner.match().substr(1, d_scanner.leng() - 2));
    }
|
    DECIMAL
    {                                                   
        $$ = PatternVal::str(d_states, d_scanner.match());
    }
|
    SECTION_DELIMITER
    {
        $$ = PatternVal::str(d_states, d_scanner.match());
    }
|
    character_class
    {
        $$ = PatternVal::charSet(d_states, *$1);
    }
|
    plain_characters
    {
        $$ = PatternVal::plain(
                d_states, 
                static_cast<unsigned char>(d_scanner.match()[0])
            );
    }
|
    ESCAPE_SEQUENCE
    {
        $$ = PatternVal::plain(d_states, d_scanner.match());
    }
|
    '.'
    {
        $$ = PatternVal::dot(d_states);
    }
|
    pattern pattern         %prec CHARACTER
    {
        $$ = PatternVal::concatenate(d_states, *$1, *$2);
    }
|
    '^' pattern
    {
        $$ = PatternVal::bol(d_states, *$2);
    }
|
    pattern '|' pattern
    {
        $$ = PatternVal::opOr(d_states, *$1, *$3);
    }
|
    pattern quantifier
    {
        $$ = PatternVal::quantifier(d_states, *$1, d_scanner.match()[0]);
    }
|
    '(' incParen pattern ')' decParen
    {
        $$ = $3;
    }    
|
    pattern '{' start_interval_m  interval '}' regex_block_m
    {
        $$ = interval(*$1, *$4);
    }
|
    pattern '/' pattern         // handles $ through scanner intelligence
    {
        $$ = lookahead(*$1, *$3);
    }
;

