opt_rules:
    rules
|
    // empty
;

rules:
    rules rule_line
|
    rule_line
;

rule_line:                      
    rule_definition '\n' mode_pattern
;                               
                                

rule_definition:
    rule
|
    startcondition_scope
|
    error
|
    // empty                    // allow empty lines between rule_definitions
;

startcondition_scope:
    startcondition '{' regex_m opt_rules '}'
    {
        d_rules.resetStartConditions();
    }
|
    startcondition rule
    {
        d_rules.resetStartConditions();
    }
;

startcondition:
    '<' start_condition_name_m mode_initial startcondition_spec 
    '>' mode_pattern
;

startcondition_spec:
    startcondition_list
|
    '*'
    {
        d_rules.useAll();
    }
;

startcondition_list:
    startcondition_list ',' miniscanner
|
    miniscanner
;

miniscanner:
    name
    {
        d_rules.activateStartCondition(*$1);
    }
;

rule:
    '^' pattern_ws BLOCK
    {
        d_rules.add(true, $2, d_scanner.block(), 
                    d_scanner.filename(), d_scanner.lineno());
    }
|
    '^' pattern_ws
    {
        d_rules.add(true, $2, Block(), 
                    d_scanner.filename(), d_scanner.lineno());
    }
|
    pattern_ws BLOCK
    {
        d_rules.add(false, $1, d_scanner.block(), 
                    d_scanner.filename(), d_scanner.lineno());
    }
|
    pattern_ws
    {
        d_rules.add(false, $1, Block(), 
                    d_scanner.filename(), d_scanner.lineno());
    }
;




