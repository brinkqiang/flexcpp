_ms_name:
    identifier
    {
        d_rules.activateStartCondition($1);
    }
;

_ms_list:
    _ms_list ',' _ms_name
|
    _ms_name
;

_ms_specs:
    '*'
    {   // following <*> all mini scanners apply
        d_rules.useAll();
    }    
|
    _ms_list
;

_ms:
    '<' _ms_specs '>' 
;

    // elements may need to be split between cc_element and regex
    // if their handling turns out to be special
_combi_chars:
    STRING
|
    DECIMAL
|
    ESCAPE_SEQUENCE
|
    identifier
|
    CHAR
|
    '.'
|
    ','
|
    '^'
|
    '$'
|
    '='
|
    '-'
|
    '\''
;

_decimal:
    DECIMAL
    {
        $$ = d_matched;
    }
;

_interval:
    DECIMAL
|
    _decimal ',' DECIMAL
|
    _decimal ','
;
    

_quantifier:
    '*'
|
    '+'
|
    '?'
|
    '{' _interval '}'
;

_m_contents:
    {
        d_msg = "character class";
    }
;

_cc_start:
    CC_START
    _m_contents
;

_cc_negated:
    CC_NEGATED
    _m_contents
;

_cc_end:
    ']'
    {
        d_msg = "pattern or action block";
    }
;

    // characters handled identically within a character-set
_cc_char:
    '/'
|
    '|'
|
    '('
|
    ')'
|
    '*'
|
    '+'
|
    '?'
|
    '{'
|
    '}'
|
    '<'
|
    '>'
|
    '['
;

_cc_element:
    _combi_chars
|
    PREDEFINED_CLASS
|
    _cc_char
;


_cc_contents:
    _cc_contents _cc_element
|
    _cc_element
;


_cc_set:
    _cc_start _cc_contents _cc_end
|
    _cc_negated _cc_contents _cc_end
;


_characterclass:
    _characterclass CC_PLUS _characterclass
|
    _characterclass CC_MINUS _characterclass
|
    _cc_set
;
 

    // a _simple_regex is a regular expression, not having a LA operator
    // It may have ^ and $ symbols
_simple_regex:
    _combi_chars
|
    _simple_regex _simple_regex           %prec CHAR
|
    _simple_regex '|' _simple_regex
        { cout << "OR\n"; }
|
    '(' _simple_regex ')'
|
    _simple_regex _quantifier
        { cout << "QTY\n"; }
|
    _characterclass
        { cout << "CLASS\n"; }
;


    // the p_regex is a print-wrapper around regex
_p_regex:
    _simple_regex
        {cout << "RE\n";}
;

    // a _regex is a regex, possibly with LA operator
    // the handler must verify whether the regex contains ^ and $ symbols
    // within the regex, for which a warning must be issue: ^, $ treated as
    // normal characters
_regex:
    _p_regex
|
    _p_regex '/' _p_regex 
        {cout << "LA\n";}
;

        // regex in the form: <miniscanner>(opt) regex
_optMs_regex:       
    _ms _regex
    {   // following a <ms>regex, reset the ms back to INITIAL
        d_rules.resetStartConditions();
    }
|
    _regex
;

    // series of _optMs_regexes, separated by '|' at the end of lines. E.g.,
    // _optMs_regex1   |
    // _optMs_regex2   |
    // _optMs_regex3
    // (ORNL is returned at '| {OPTBL} \n')
    // at ORNL any previously set ms-spec ends, and is back to INITIAL
_optMs_regex_list:
    _optMs_regex_list ORNL _optMs_regex_list
        {cout << "ORNL\n";}
|
    _optMs_regex
;

_block:
    BLOCK
    {
        block();
    }
;

_regex_list:
     _regex_list ORNL _regex_list
|
     _regex
;

_msBlock_rule_def:
    // empty
|
    _regex_list 
|
    _regex_list _block    
|
    EOF_PATTERN
|
    EOF_PATTERN _block
;


    // each rule ends in a '\n'
_msBlock_rule:                      
    _msBlock_rule_def '\n'       
;                               
                                

_msBlock_rules:
    _msBlock_rules _msBlock_rule
|
    // empty
;

_ms_block:
    _ms '{' _msBlock_rules _msBlock_rule_def '}'
    {   // following a ms_block, reset the startconditions to 'INITIAL'
        d_rules.resetStartConditions();
    }
;

_rule_def:
    // only an empty line is OK
|
    // recovery from errors is OK: continue at the next line
    error       
|
        // just regular expressions, without an action block
    _optMs_regex_list 
|
        // the scanner returns a block if it encounters a non-blank character
        // on a line after ws, unless the character is a '|'
    _optMs_regex_list _block    
        { cout << "BLOCK\n"; }
|
    _ms_block
|
    EOF_PATTERN
|
    EOF_PATTERN _block
;

    // each rule ends in a '\n'
_rule:                      
    _rule_def '\n'       
;                               
                                
    // there may be no rules
    // the scanner skips blanks, but returns '\n'
rules:
    rules _rule
|
    // empty
;

