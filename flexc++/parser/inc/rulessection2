    // we're in mode_pattern: the pattern miniscanner is active
opt_rules:
    rules
|
    // empty
;

rules:
    rules block_nl
|
    block_nl
;

block_nl:
    block   '\n' mode_pattern
|
    error   '\n' mode_pattern
;                               
                                

    block:
        block_rule BLOCK
    |
        block_rule
    ;

block_rule:
    lookahead_rule
|
    multi_line_rule
|
    embedded
;

    lookahead_rule:
        bol_rule '/' pattern_ws
    ;

    multi_line_rule:
        multi_line_rule OR multi_line_rule
    |
        bol_rule
    ;

    bol_rule:
        opt_start_condition embedded_bol_rule
    ;
    
    opt_start_condition:
        // empty
    |
        condition
    ;
    
    condition:
        '<' start_condition_name_m mode_initial startcondition_spec 
        '>' mode_pattern
    ;

embedded:
    condition '{' embedded_rules '}'
;

embedded_rules:
    embedded_rules embedded_block
|
    embedded_block
;

embedded_block:
    embedded_block_rule BLOCK
;

embedded_block_rule:
    embedded_lookahead
|
    embedded_multi_line_rules
;

    // entry:   
embedded_lookahead:
    embedded_bol_rule '/' pattern_ws
;

    // entry: pattern
    // exit: block
embedded_multi_line_rules:
    embedded_multi_line_rules OR mode_pattern embedded_multi_line_rules
|
    embedded_bol_rule
;

    // entry:   pattern, 
    // exit:    block
embedded_bol_rule:
    '^' pattern_ws
|
    pattern_ws
;
    
startcondition_spec:
    startcondition_list
|
    '*'
    {
        d_rules.useAll();
    }
;

startcondition_list:
    startcondition_list ',' miniscanner
|
    miniscanner
;

miniscanner:
    name
    {
        d_rules.activateStartCondition(*$1);
    }
;

    // regex:
    //     '^' pattern_ws
    // rule:
    //     '^' pattern_ws ORNL
    // |
    //     '^' pattern_ws BLOCK
    //     {
    //         d_rules.add(true, $2, d_scanner.block(), 
    //                     d_scanner.filename(), d_scanner.lineNr());
    //     }
    // |
    //     pattern_ws BLOCK
    //     {
    //         d_rules.add(false, $1, d_scanner.block(), 
    //                     d_scanner.filename(), d_scanner.lineNr());
    //     }
    // |
    //     '^' pattern_ws
    //     {
    //         d_rules.add(true, $2, Block(), 
    //                     d_scanner.filename(), d_scanner.lineNr());
    //     }
    // |
    //     pattern_ws
    //     {
    //         d_rules.add(false, $1, Block(), 
    //                     d_scanner.filename(), d_scanner.lineNr());
    //     }
    // ;




    //
    //    startcondition_scope
    //|
    //    error
    //|
    //    // empty                    // allow empty lines between block_rules
    //;

    // startcondition_scope:
    //     startcondition '{' regex_m opt_rules '}'
    //     {
    //         d_rules.resetStartConditions();
    //     }
    // |
    //     startcondition rule
    //     {
    //         d_rules.resetStartConditions();
    //     }
    // ;
    // 
    // startcondition:
    //     '<' start_condition_name_m mode_initial startcondition_spec 
    //     '>' mode_pattern
    // ;
    // 





