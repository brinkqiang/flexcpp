_sc_name:
    {
        d_expect = "list of start condition names";
    }
;

_start_condition_type:
    INCL_START_CONDITION 
    _sc_name
    {
        d_rules.setType(StartConditions::INCLUSIVE);
    }
|
    EXCL_START_CONDITION 
    _sc_name
    {
        d_rules.setType(StartConditions::EXCLUSIVE);
    }
;

_start_condition_names:
    _start_condition_names identifier
    {
        d_rules.defineStartCondition($2);
    }
|
    identifier
    {
        d_rules.defineStartCondition($1);
    }
;

_start_condition_directive:
    _start_condition_type
    _start_condition_names
;

_start_condition_name_msg:
    {
        d_expect = "start condition enum name";
    }
;

_start_condition_name_directive:
    STARTCONDITION
    _start_condition_name_msg
    IDENTIFIER
    {
        d_options.setStartConditionName(d_scanner.matched());
    }
;
    
_name_def:
    identifier
    {
        d_scanner.newDefinition();  // briefly switches to 'line'
        $$ = d_scanner.matched();
    }
;

_stringType:
    STRING
    {
        $$ = TextType::STRING;
    }
|
    RAWSTRING
    {
        $$ = rawString();
    }
;

_name_definition:
    _name_def _stringType
    {
        d_scanner.addDefinition($1, $2);
    }
;

_directive:
    option
|
    _start_condition_directive
|
    _name_definition
|
    _start_condition_name_directive
|
    error
|
    // empty
;

_directive_line:
    _directive '\n'
//    {
//        if (d_scanner.endOfInput())
//        {
//            emsg << "Section delimiter %% expected" << endl;
//            ABORT();
//        }
//    }
;

opt_directives:
    opt_directives _directive_line
|
    // empty
;
