_single_char:
    CHAR
|
    combi_chars
;

_multi_char:
    DECIMAL
|
    IDENTIFIER
;

_open_paren:
    '('
    {
        ++d_parentheses;
    }
;

_close_paren:
    ')'
    {
        --d_parentheses;
    }
;

_unit_regex:
    '^'
    {
        $$ = boln();
    }
|
    '$'
    {
        $$ = dollar();
    }
|
    DOLLAR
    {
        $$ = eolnDollar();
    }
|
    STRING
    {
        $$ = str();
    }
|
    QUOTES
    {                                                   
        $$ = quotes();
    }
|
    _multi_char
    {
        $$ = head();
    }
|
    _single_char
    {
        $$ = rawText();
    }
|
    ESCAPE_SEQUENCE
    {
        $$ = escape();
    }
|
    '.'
    {
        $$ = dot();
    }
|
    _unit_regex _unit_regex           %prec CHAR
    {
        $$ = concatenate($1, $2);
    }
|
    _unit_regex _quantifier
    {
        $$ = quantifier($1);
    }
|
    _unit_regex '{' _interval '}'
    {
        $$ = interval($1, $3);
    }
|
    characterclass
    {
        $$ = characterClass($1);
    }
;

    // a _simple_regex is a regular expression, not having a LA operator
    // It may have ^ and $ symbols
    // _simple_regex returns a Pattern, embedded in a spSemUnion
_simple_regex:
    _unit_regex
|
    _simple_regex '|' _simple_regex
    { 
        $$ = alternatives($1, $3);
    }
|
    _open_paren _simple_regex _close_paren
    {
        $$ = $2;
    }
;

    // a regex is a regex, possibly with LA operator
    // the handler must verify whether the regex contains ^ and $ symbols
    // within the regex, for which a warning must be issue: ^, $ treated as
    // normal characters
    // regex returns a Pattern, embedded in a spSemUnion
regex:
    _simple_regex
|
    _simple_regex '/' _simple_regex 
    {
        $$ = lookahead($1, $3);
    }
;
