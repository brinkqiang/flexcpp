_inputinterface:
    INPUTINTERFACE
    {
        d_expect = "name of the file holding Input's interface";
    }
;

_inputimplementation:
    INPUTIMPLEMENTATION
    {
        d_expect = "name of the file holding Input's implementations";
    }
;

_classname:
    CLASSNAME
    {
        d_expect = "class name";
    }
;

_lexfunctionname:
    LEXFUNCTIONNAME
    {
        d_expect = "name of the lex() function";
    }
;

_baseclassheader:
    BASECLASSHEADER
    {
        d_expect = "scanner base class header file name";
    }
;

_classheader:
    CLASSHEADER
    {
        d_expect = "scanner class header file name";
    }
;

_implementationheader:
    IMPLEMENTATIONHEADER
    {
        d_expect = "implementation header file name";
    }
;

_lexsource:
    LEXSOURCE
    {
        d_expect = "source file name of the lex function";
    }
;

_skeleton_directory:
    SKELETON_DIRECTORY
    {
        d_expect = "directory name of the flexc++ skeleton files";
    }
;

_namespace:
    NAMESPACE
    {
        d_expect = "name of the namespace to use";
    }
;

_stringOrIdent:
    STRING
|
    IDENTIFIER
;

_opt_comma:
    ','
|
    // empty
;

_debugname:
    IDENTIFIER
    {
        d_options.setDebug(d_matched);
    }
;

_debugnamelist:
    _debugnamelist _opt_comma _debugname
|
    _debugname
;

_m_debugnamelist:
    {
        d_expect = "debug identifiers";
    }
;

_opt_debugnamelist:
    _m_debugnamelist '=' _debugnamelist
|
    {
        d_options.setDebug();
    }
;

_firststep:
    DECIMAL
    {
        d_options.setStepRange(d_matched);
    }
;

_opt_laststep:
    // empty
|
    DECIMAL
    {
        d_options.setLastStep(d_matched);
    }
;

_m_debugsteps:
    {
        d_expect = "debug step range";
    }
;

_opt_steprange:
    _m_debugsteps '=' _firststep _opt_laststep
|
    {
        d_options.setStepRange();
    }
;

option:
    _inputinterface '=' _stringOrIdent
    {
        d_options.setInputInterfacePath(d_matched);
    }
|
    _inputimplementation '=' _stringOrIdent
    {
        d_options.setInputImplementationPath(d_matched);
    }
|
    _classname '=' _stringOrIdent
    {
        d_options.setClassName(d_matched);
    }
|
    _lexfunctionname '=' _stringOrIdent
    {
        d_options.setLexFunctionName(d_matched);
    }
|
    _baseclassheader '=' _stringOrIdent
    {
        d_options.setBaseClassHeaderPath(d_matched);
    }
|
    _classheader '=' _stringOrIdent
    {
        d_options.setClassHeaderPath(d_matched);
    }
|
    _implementationheader '=' _stringOrIdent
    {
        d_options.setImplementationHeaderPath(d_matched);
    }
|
    _lexsource '=' _stringOrIdent
    {
        d_options.setLexSourcePath(d_matched);
    }
|
    _skeleton_directory '=' _stringOrIdent
    {
        d_options.setSkeletonDirectory(d_matched);
    }
|
    _namespace '=' _stringOrIdent
    {
        d_options.setNameSpace(d_matched);
    }
|
    INTERACTIVE
    {
        d_options.setInteractive();
    }
|
    DEBUG _opt_debugnamelist
|
    DEBUG_STEPS _opt_steprange
|
    NOLINES
    {
        d_options.setLines(false);
    }
;

