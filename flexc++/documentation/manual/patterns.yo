lchapter(patterns)(Patterns)

The patterns in the input (see lref(Rules Section)(rulessection)) are
written using an extended set of regular expressions. These are:

description(
dit(tt(x))
    match the character `x'
dit(tt(.))
    any character (byte) except newline
dit(tt([xyz]))
    a character class; in this case, the pattern matches either an `x', a `y',
    or a `z'
dit(tt([abj-oZ]))
    a ``character class'' with a range in it; matches an `a', a `b', any
    letter from `j' through `o', or a `Z'
dit(tt([^A-Z]))
    a ``negated character class'', i.e., any character but those in the class.
    In this case, any character EXCEPT an uppercase letter.
dit(tt([^A-Z\n]))
    any character EXCEPT an uppercase letter or a newline
dit(tt("[xyz]\"foo"))
    the literal string: `[xyz]"foo'
dit(tt(\X))
    if X is `a', `b', `f', `n', `r', `t', or `v', then the ANSI-C
    interpretation of `\x'. Otherwise, a literal `X' (used to escape operators
    such as `*')
dit(tt(\0))
    a NUL character (ASCII code 0)
dit(tt(\123))
    the character with octal value 123
dit(tt(\x2a))
    the character with hexadecimal value 2a

dit(tt((r)))
    match an `r'; parentheses are used to override precedence (see below)
dit(tt({name}))
    the expansion of the `name' definition (see lref(format of the input
    file)(fileformat)).

dit(tt(r*))
    zero or more r's, where r is any regular expression. Note that this will
    also match the empty string!
dit(tt(r+))
    one or more r's
dit(tt(r?))
    zero or one r's (that is, ``an optional r'') (This will also match the
    empty string!).

dit(tt(rs))
    the regular expression `r' followed by the regular expression `s'; called
    concatenation

dit(tt(r{m, n}))
    where tt(1 <= m <= n): match `r' at least m, but at most n times; called
    interval expression.
dit(tt(r{m,}))
    where tt(1 <= m): match `r' m or more times.
dit(tt(r{m}))
    where tt(1 <= m): match `r' exactly m times.

dit(tt(r|s))
    either an `r' or an `s'

dit(tt(r/s))
    an `r' but only if it is followed by an `s'. The text matched by `s' is
    included when determining whether this rule is the longest match, but is
    then returned to the input before the action is executed. So the action
    only sees the text matched by `r'. This type of pattern is called trailing
    context. COMMENT(There are some combinations of `r/s' that flc() cannot match
    correctly. See Limitations, regarding dangerous trailing context.)
dit(tt(^r))
    an `r', but only at the beginning of a line (i.e., when just starting to
    scan, or right after a newline has been scanned).  
dit(tt(r$))
    an `r', but only at the end of a line (i.e., just before a newline).
    Equivalent to `r/\n'.

dit(tt(<s>r))
    an `r', but only in start condition s (see lref(Start
    Conditions)(startconditions) for discussion of start conditions).
dit(tt(<s1,s2,s3>r))
    same, but in any of start conditions s1, s2, or s3.

dit(tt(<)tt(<EOF>)tt(>))
    an end-of-file.
dit(tt(<s1,s2><)tt(<EOF>)tt(>))
    an end-of-file when in start condition s1 or s2 
)

Note that inside of a character class, all regular expression operators lose
their special meaning except escape (tt(\)) and the character class operators,
tt(-), tt(]]), and, at the beginning of the class, tt(^).

The regular expressions listed above are grouped according to precedence, from
highest precedence at the top to lowest at the bottom. Those grouped together
have equal precedence. For example,
     
verb(foo|bar*)

is the same as

verb((foo)|(ba(r*)))

since the tt(*) operator has higher precedence than concatenation, and
concatenation higher than alternation (tt(|)). This pattern therefore matches
either the string `foo' or the string `ba' followed by zero-or-more `r's. To
match `foo' or zero-or-more repetitions of the string `bar', use:

verb(foo|(bar)*)

And to match a sequence of zero or more repetitions of `foo' and `bar':
     
verb((foo|bar)*)

Note that concatenation has a higher precedence than the interval expression.
This is different from many other regular expression engines. It conforms,
however, to the lex standard.

Also, note that the name expansion has about the same precedence as grouping
(using parentheses to influence the precedence of the other operators in the
regular expression).  Since the name expansion is treated as a group in flc(),
it is not allowed to use the lookahead operator in a name definition (a named
pattern, defined in the definition section). That is because only one lookahead
operator is allowed in a regular expression. In flex, it was possible to use
the lookahead operator and the `^' operator (the begin anchor) in a name
definition, so pay attention to the difference.

In addition to characters and ranges of characters, character classes can also
contain character class expressions. These are expressions enclosed inside
tt([:) and tt(:]) delimiters (which themselves must appear between the tt([)
and tt(]) of the character class. Other elements may occur inside the
character class, too). The valid expressions are:

verb(     
         [:alnum:] [:alpha:] [:blank:]
         [:cntrl:] [:digit:] [:graph:]
         [:lower:] [:print:] [:punct:]
         [:space:] [:upper:] [:xdigit:]
)

These expressions all designate a set of characters equivalent to the
corresponding standard C isXXX function. For example, tt([:alnum:]) designates
those characters for which tt(isalnum()) returns true - i.e., any alphabetic
or numeric character.

For example, the following character classes are all equivalent:

verb( 
         [[:alnum:]]
         [[:alpha:][:digit:]]
         [[:alpha:][0-9]]
         [a-zA-Z0-9]
)

COMMENT( -- I believe this is no longer true!
A word of caution. Character classes are expanded immediately when seen in the
flc() input. This means the character classes are sensitive to the locale in
which flc() is executed, and the resulting scanner will not be sensitive to
the runtime locale. This may or may not be desirable.
)

A negated character class such as the example tt([^A-Z]) above will match a
newline unless tt(\n) (or an equivalent escape sequence) is one of the
characters explicitly present in the negated character class (e.g.,
tt([^A-Z\n])). This is unlike how many other regular expression tools treat
negated character classes, but unfortunately the inconsistency is historically
entrenched. Matching newlines means that a pattern like tt([^"]*) can match
the entire input unless there's another quote in the input.  

Flc() allows negation of character class expressions by prepending tt(^) to
the POSIX character class name.

verb(                
         [:^alnum:] [:^alpha:] [:^blank:]
         [:^cntrl:] [:^digit:] [:^graph:]
         [:^lower:] [:^print:] [:^punct:]
         [:^space:] [:^upper:] [:^xdigit:]
)      

The '{-}' operator computes the difference of two character classes. For
example, '[a-c]{-}[b-z]' represents all the characters in the class '[a-c]'
that are not in the class '[b-z]' (which in this case, is just the single
character 'a'). The '{-}' operator is left associative, so '[abc]{-}[b]{-}[c]'
is the same as '[a]'. Be careful not to accidentally create an empty set, which
will never match.

The '{+}' operator computes the union of two character classes. For example,
'[a-z]{+}[0-9]' is the same as '[a-z0-9]'. This operator is useful when
preceded by the result of a difference operation, as in,
'[[:alpha:]]{-}[[:lower:]]{+}[q]', which is equivalent to '[A-Zq]' in the "C"
locale.

A rule can have at most one instance of trailing context (the tt(/) operator
or the tt($) operator). The start condition, tt(^), and tt(<)tt(<EOF>)tt(>)
patterns can only occur at the beginning of a pattern, and, as well as with
tt(/) and tt($), cannot be grouped inside parentheses. A tt(^) which does not
occur at the beginning of a rule or a tt($) which does not occur at the end of
a rule loses its special properties and is treated as a normal character.

The following are invalid:

verb(                
         foo/bar$
         <sc1>foo<sc2>bar
)     

Note that the first of these can be written `foo/bar\n'.

The following will result in tt($) or tt(^) being treated as a normal
character:

verb( 
         foo|(bar$)
         foo|^bar
)

If the desired meaning is a `foo' or a `bar'-followed-by-a-newline, the
following could be used (the special | action is explained below, see Actions):

           

verb(                
         foo      |
         bar$     /* action goes here */
)      

A similar trick will work for matching a `foo' or a
`bar'-at-the-beginning-of-a-line.
