Code is generated by an object of the class tt(Generator). 
The generator generates the following files (using default names, all defaults
can be overruled by directives and options):

itemization(
itt(scannerbase.h.) This file defines the scanner's base class. It is always
rewritten and declares data members used by the scanner.

itt(scanner.h.) This file represents the generated scanner's interface. It
inherits from tt(ScannerBase) and is written only if not existing. 

itt(lex.cc) This file contains the implementation of the scanner function and
any support functions it may need. This file is always rewritten.
)

Each of these three files has a skeleton, found in tt(/usr/share/flexc++)
which is copied to the generated code, embedding the following elements into
the generated files:

itemization( 
it() The em(static data) are inserted into the generated tt(lex.cc)
file. Static data are not used by other components of the scanner, and could
be embedded in the anonymous namespace;

it() The em(actions) are inserted into the generated tt(lex.cc) as well.

it() The em(declarations) are inserted into the generated tt(scannerbase.h)
file. 
)

The member tt(genLex) generates the lexer file tt(lex.cc). It recognizes
tt($insert) lines starting in column 1 and performs the matching action,
inserting appropriate elements into the generated file.

Other generating members act similarly:

The member tt(genBase) generates the scanner base file tt(scannerbase.h), the
member tt(genScanner) generates tt(scanner.h).
