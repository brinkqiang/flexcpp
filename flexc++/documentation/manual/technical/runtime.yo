The tt(lex) function works as follows:

itemization(
it() All its variables have been initialized at construction time.
it() In a loop (until EOF) characters are retrieved until a rule is matched
    (see below)
it() Once a rule has been matched its matching code block is executed.
)

Processing characters:

The next character from the input is obtained in tt(d_char). At the beginning
of the character processing loop tt(d_char) must have received a value.
At EOF ....
        quote(TODO)
    Otherwise, tt(d_range) is determined as tt(s_ranges[d_char]).

The variable tt(d_dfaBase) points at the dfa currently used. The variable
tt(d_dfaIdx) holds the index of the current row in the current dfa. 

The expression 
        verb(
    nextIdx = (d_dfa + d_dfaIdx)[d_range];
        ) 
    provides the next tt(d_dfaIdx) value. If unequal -1 do:
        verb(
    d_dfaIdx = nextIdx;
    d_char = nextChar();
        )
    If equal -1 then there is no continuation for the current rule. 

In em(all) case where the last two elements of the current  tt(s_dfa) row
are unequal special actions must be performed. Using the last but one's value
as tt(d_finAcIdx) do as follows:
    itemization(
    it() If there is a continuation for the current character range (so
tt((d_dfaBase + d_dfaIdx)[d_charRange]) is unequal -1) then inspect the
tt(s_finAcInfo + d_finAcIdx)'s A and I values.
    itemization(
    it() If I equals 1 store A's value and increment it at each next
        transition until a rule has been matched. This determines the LA
        tail-length;
    )
    it() Otherwise (no continuation):
        itemization(
        it() If I equals 1 then the A count incremented so far is the LA's
            tail length.
        it() If I equals 0 and A is non-negative then A's value is the LA's
            tail length
        it() If F is positive then it is the accept count of the current rule
            quote(TODO: 
                maybe this and the previous option are mutually exclusive and
                only one of them occurs in practice.
            )
            If F equals -1 then accept the matched text as is.nl()
            If it equals -2 we're not at a final state. If there's no
            continuation, push back all but the first character, echo the 1st
            char and continue scanning with the INITAL scanner at state 0.
        )
    )
If a final state has been reached then possibly push back the LA tail and
execute the actions of the rule that was matched. Using the currently active
miniscanner, start matching the next rule.

        
    




