includefile(include/header)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(input)(3flexc++)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Input class interface)

manpagename(input)(Default input class interface generated by flexc++)

manpagesynopsis()
    bf(#include "input.h")nl()

manpagedescription()

This interface must at least offer
            the following elements:
        verb(
class Input
{
    public:
        Input();
        Input(std::istream *iStream);   // dynamically allocated iStream
        size_t get();                   // the next character
        size_t lineNr() const;          
        void reRead(size_t ch);         // push back 'ch' (if <= 0x100)
                                        // push back str from idx 'fmIdx'
        void reRead(std::string const &str, size_t fmIdx);

        void close();                 // delete dynamically allocated
};
        )        


    By default, flc() generates a file tt(input.h) containing the initial
interface of the input class performing the lexical scan according to the
specifications given in flc()'s input file. The name of the file that is
generated can easily be changed using flc()'s tt(--class-header)
option. In this man-page we'll stick to using the default name.

    The file tt(input.h) is generated only once, unless an explicit request
is made to rewrite it (using flc()'s tt(--force-class-header) option).

    The provided interface is very light-weight, primarily offering a link to
the input's base class (see bf(inputbase)(3flexc++).

    Many of the facilities offered by the input class derive from this base
class, and the reader should consult bf(inputbase)(3flexc++) for further
details about additional elements of the input's interface.

manpagesection(NAMING CONVENTION)

    All symbols that are required by the generated input class end in two
consecutive underscore characters (e.g., tt(executeAction__)). These names
should not be redefined. As they are part of the tt(Input) and
tt(InputBase) class their scope is immediately clear and confusion with
identically named identifiers elsewhere is not to be expected. 

    Some member functions do not use the underscore convention. These are the
input class's constructors, or names that are similar or equal to names that
have historically been used (e.g., tt(length, text)). Also, some functions are
offered offering hooks into the implementation (like tt(preCode)). The latter
category of function also have names that don't end in underscores.

manpagesection(CONSTRUCTORS)

    itemization(
    itb(explicit Input(std::istream &in = std::cin, 
                    std::ostream &out = std::cout))
        This constructor by default reads information from the standard input
stream and writes to the standard output stream. By providing alternate
streams either input or input and output streams can be altered. When the
tt(Input) object goes out of scope the input and output files are closed.
    itb(Input(std::string const &infile, std::string const &outfile))
        This constructor opens the input and output streams whose file names
were specified. When the tt(Input) object goes out of scope the input and
output files are closed.
    )
    
manpagesection(PUBLIC MEMBER FUNCTION)

    itemization(
    itb(int lex())
        The tt(lex) function performs the lexical scanning of the input file
specified at construction time (but see also bf(inputbase)(3flexc++) for
information about intermediate stream-switching facilities). It returns and
tt(int) representing the em(token) associated with the matched regular
expression. The returned value 0 indicates end-of-file. Considering its
default implementation, it could be redefined by the user. tt(Lex)'s default
implementation merely calls tt(lex__):
        verb(
inline int Input::lex()
{
    return lex__();
}
        )
    )

manpagesection(PRIVATE MEMBER FUNCTIONS)

    itemization(
    itb(int lex__())
        This function is used internally by tt(lex) and should not otherwise
be used.
    itb(int executeAction__())
        This function is used internally by tt(lex) and should not otherwise
be used.
    itb(void preCode())
        By default this function is given an empty, inline implementation in
tt(input.h). It can safely be replaced by a user-defined
implementation. This function is called just before tt(lex) retrieves the next
character from the input stream. The outline of tt(lex)'s implementation looks
like this:
        verb(
int Input::lex__()
{
    ...
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        ...
        switch (actionType__(range))        // determine the action
        {
            ... maybe return
        }
        ... no return, continue scanning
        preCode();
    } // while
}
        )
    )
    
manpagesection(EXAMPLE)

        verb(
// Generated by Flexc++ V0.8.0~pre on Wed, 06 Jul 2011 11:56:30 +0200

#ifndef Input_H_INCLUDED_
#define Input_H_INCLUDED_

// $insert baseclass_h
#include "inputbase.h"


class Input: public InputBase
{
    public:
        explicit Input(std::istream &in = std::cin, 
                    std::ostream &out = std::cout);
        
        Input(std::string const &infile, std::string const &outfile);

        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts
};

inline void Input::preCode() 
{
    // optionally replace by your own code
}

inline Input::Input(std::string const &infile, std::string const &outfile)
:
    InputBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int Input::lex()
{
    return lex__();
}

#endif // Input_H_INCLUDED_
        )


manpageseealso()

    bf(flexc++)(1), bf(rules)(3flexc++), bf(scanner)(3flexc++),  
    bf(scannerbase)(3flexc++), 

manpagebugs()
    None Reported.

includefile(include/trailer)
