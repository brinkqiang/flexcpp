NOUSERMACRO(lex setDebug)

includefile(../../release.yo)

htmlbodyopt(text)(#27408B)
htmlbodyopt(bgcolor)(#FFFAF0)
whenhtml(mailto(Frank B. Brokken: f.b.brokken@rug.nl))

DEFINEMACRO(lsoption)(3)(\
    bf(--ARG1)=tt(ARG3) (bf(-ARG2))\
)
DEFINEMACRO(laoption)(2)(\
    bf(--ARG1)=tt(ARG2)\
)
DEFINEMACRO(loption)(1)(\
    bf(--ARG1)\
)
DEFINEMACRO(soption)(1)(\
    bf(-ARG1)\
)

DEFINEMACRO(flc)(0)(bf(flexc++))
DEFINEMACRO(Flc)(0)(bf(Flexc++))
DEFINEMACRO(Cpp)(0)(bf(C++))
DEFINEMACRO(prot)(0)(tt((prot)))

DELETEMACRO(tt)
DEFINEMACRO(tt)(1)(em(ARG1))

COMMENT( man-request, section, date, distribution file, general name)
manpage(flexc++)(1)(_CurYrs_)(flexc++._CurVers_.tar.gz)
        (flexc++ scanner generator)

COMMENT( man-request, larger title )
manpagename(flexc++)(Generate a C++ scanner class and parsing function)

COMMENT( all other: add after () )
manpagesynopsis()
       bf(flexc++) [OPTIONS] tt(grammar-file)

manpagedescription()

    To do

    manpagesection(GENERATED FILES)

    To do

manpageoptions()
    To complete

    If available, single letter options are listed between parentheses
following their associated long-option variants. Single letter options require
arguments if their associated long options require arguments as well.
    itemization(
    it() lsoption(class-header)(c)(header)nl()
           Use tt(header) as the pathname of the file containing the scanner
            class. Defaults to the name of the scanner class plus the suffix
            tt(.h)
    it() lsoption(class-skeleton)(C)(skeleton)nl()
           Use tt(skeleton) as the pathname of the file containing the
            skeleton of the scanner class. Its filename defaults to
            tt(flexc++.h). 
    it() loption(debug)nl() 
           Provide bf(lex()) and its support functions with debugging code,
            showing the actual parsing process on the standard output
            stream. When included, the debugging output is active by default,
            but its activity may be controlled using the bf(setDebug(bool
            on-off)) member. Note that no tt(#ifdef DEBUG) macros are used
            anymore. By rerunning flc() without the bf(--debug) option an
            equivalent scanner is generated not containing the debugging
            code. 
    it() lsoption(filenames)(f)(filename)nl()
           Specify a filename to use for all files produced by flc(). 
            Specific options overriding particular filenames are also
            available (which then, in turn, overide the name specified by this
            option).
    it() loption(force-class-header)nl()
           By default the generated class header is not overwritten once it
            has been created. This option can be used to force the
            (re)writing of the file containing the scanner's class.
    it() loption(force-implementation-header)nl()
           By default the generated implementation header is not overwritten
            once it has been created. This option can be used to force the
            (re)writing of the implementation header file.
    it() loption(help) (soption(h))nl()
            Write basic usage information to the standard output stream and
            terminate. 
    it() lsoption(implementation-header)(i)(header)nl()
           Use tt(header) as the pathname of the file containing the
            implementation header. Defaults to the name of the generated
            scanner class plus the suffix tt(.ih). The implementation header
            should contain all directives and declarations em(only) used by
            the implementations of the scanner's member functions. It is the
            only header file that is included by the source file containing
            bf(lex())'s implementation . User defined implementation of
            other class members may use the same convention, thus
            concentrating all directives and declarations that are required
            for the compilation of other source files belonging to the scanner
            class in one header file.
    it() lsoption(implementation-skeleton)(I)(skeleton)nl()
           Use tt(skeleton) as the pathname of the file containing the
            skeleton of the implementation header. Its filename defaults to
            tt(flexc++.ih).
    it() loption(lines) (soption(l))nl() 
           Put bf(#line) preprocessor directives in the file containing the
            scanner's bf(lex()) function. By including this option the
            compiler and debuggers will associate errors with lines in your
            grammar specification file, rather than with the source file
            containing the bf(lex()) function itself.
    it() lsoption(namespace)(n)(namespace)nl()
           Define the scanner base class, the paser class and the scanner
            implentations in the namespace tt(namespace). By default
            no namespace is defined. If this options is used the
            implementation header will contain a commented out tt(using
            namespace) declaration for the requested namespace. 
    it() loption(no-lines)nl() 
           Do not put bf(#line) preprocessor directives in the file containing
            the scanner's bf(lex()) function. This option is primarily useful
            in combination with the bf(%lines) directive, to suppress that
            directive. It also overrides option bf(--lines), though.
    it() loption(no-lex-member)nl()
           Do not write the file containing the scanner's predefined scanner
            member functions, even if that file doesn't yet exist. By default
            the file containing the scanner's bf(lex()) member function is
            (re)written each time flc() is called. Note that this option
            should normally be avoided, as this file contains parsing
            tables which are altered whenever the grammar definition is
            modified. 
    it() lsoption(lexfun-skeleton)(P)(skeleton)nl()
           Use tt(skeleton) as the pathname of the file containing the
            tt(lex()) member function's skeleton. Its filename defaults to
            tt(flexc++.cc).
    it() lsoption(lexfun-source)(p)(source)nl()
           Define tt(source) as the name of the source file containing the
            scanner member function bf(lex()). Defaults to tt(lex.cc).
    it() loption(show-filenames)nl() 
           Write the names of the files that are generated to the 
            standard error stream.
    it() laoption(skeleton-directory)(directory)nl() 
           Specifies the directory containing the skeleton files to use. This
            option can be overridden by the specific skeleton-specifying
            options (tt(-B -C, -H,) and tt(-I)).
    it() loption(thread-safe)nl() 
           No static data are modified, making flc() thread-safe.
    it() loption(usage)nl()
            Write basic usage information to the standard output stream and
            terminate. 
    it() loption(version) (soption(v))nl()
            Display flc()'s version number and terminate.
    )

manpagesection(DIRECTIVES)

    To complete
 
    The following directives can be used in the initial section of the
grammar specification file. When command-line options for directives exist,
they overrule the corresponding directives given in the grammar
specification file.
    itemization(
    it() bf(%class-header) tt(header) nl()
           Defines the pathname of the file containing the scanner 
            class. This directive is overridden by the
            bf(--class-header) or bf(-c) command-line options.
    it() bf(%class-name) tt(scanner-class-name) nl()
           Declares the name of this scanner. This directive replaces the
            bf(%name) declaration previously used by bf(flex++). It defines
            the name of the bf(C++) class that will be generated. Contrary to
            bf(flex++)'s bf(%name) declaration, bf(%class-name) may appear
            anywhere in the first section of the grammar specification
            file. However, it may be defined only once. If no bf(%class-name)
            is specified the default class name tt(Scanner) will be used.
    it() bf(%debug) nl() 
           Provide bf(lex()) and its support functions with debugging code,
            showing the actual parsing process on the standard output
            stream. When included, the debugging output is active by default,
            but its activity may be controlled using the bf(setDebug(bool
            on-off)) member. Note that no tt(#ifdef DEBUG) macros are used
            anymore. By rerunning flc() without the bf(--debug) option an
            equivalent scanner is generated not containing the debugging
            code. 
    it() bf(%filenames) tt(header) nl()
           Defines the generic name of all generated files, unless overridden
            by specific names. This directive is overridden by the
            bf(--filenames) or bf(-f) command-line options.
    it() bf(%implementation-header) tt(header) nl()
           Defines the pathname of the file containing the implementation
            header.  This directive is overridden by the
            bf(--implementation-header) or bf(-i) command-line options.
    it() bf(%lines) nl() 
           Put bf(#line) preprocessor directives in the file containing the
            scanner's bf(lex()) function. It acts identically to the bf(-l)
            command line option, and is suppressed by the bf(--no-lines)
            option.
    it() bf(%namespace) tt(namespace) nl()
           Define the scanner class in the namespace tt(namespace). By default
            no namespace is defined. If this options is used the
            implementation header will contain a commented out tt(using
            namespace) declaration for the requested namespace.  This
            directive is overridden by the bf(--namespace) command-line
            option.
    it() bf(%lexfun-source) tt(source) nl()
           Defines the pathname of the file containing the scanner member
            bf(lex()). This directive is overridden by the 
            bf(--lex-source) or bf(-l) command-line options.
    )

manpagesection(PUBLIC MEMBERS AND -TYPES)

    To complete

    The following public members can be used by users of the scanner classes
generated by flc() (tt(`Scanner Class'::) prefixes are silently implied):
    itemization(
    it() bf(int lex()):nl()
           The scanner's parsing member function. It returns 0 when parsing has
            completed successfully, 1 if errors were encountered while parsing
            the input.
    it() bf(void setDebug(bool mode)):nl()
       This member can be used to activate or deactivate the debug-code
        compiled into the parsing function. It is always available but is only
        operational if the tt(%debug) directive or tt(--debug) option was
        specified.When debugging code has been compiled into the parsing
        function, it is em(not) active by default. To activate the debugging
        code, use bf(setDebug(true)).
       This member can be used to activate or deactivate the debug-code
        compiled into the parsing function. It is available but has no
        effect if no debug code has been compiled into the parsing
        function. When debugging code has been compiled into the parsing
        function, it is active by default, but debug-code is suppressed by
        calling bf(setDebug(false)).
    )
    
manpagesection(PROTECTED ENUMS AND -TYPES)

    To do


manpagesection(PRIVATE MEMBER FUNCTIONS)

    To do

manpagesection(PROTECTED DATA MEMBERS)

    To do

manpagesection(TYPES AND VARIABLES IN THE ANONYMOUS NAMESPACE)

    To do

manpagesection(OBSOLETE SYMBOLS)

    All bf(DECLARATIONS) and bf(DEFINE) symbols not listed above but defined
in bf(flex++) are obsolete with flc(). In particular, there is no bf(%header{
... %}) section anymore. Also, all bf(DEFINE) symbols related to member
functions are now obsolete. There is no need for these symbols anymore as they
can simply be declared in the class header file and defined elsewhere.
                    
manpagesection(EXAMPLE)

    To do


manpagefiles()

    To do

manpageseealso()

    To do

manpagebugs()

    To do

manpagesection(ABOUT flexc++)

    To do
    
manpageauthor()

Richard Berendsen (richardberendsen@xs4all.nl),nl()
Frank B. Brokken (f.b.brokken@rug.nl),nl()
Jean-Paul van Oosten (jpoosten@ai.rug.nl)
