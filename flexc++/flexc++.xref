oxref by Frank B. Brokken (f.b.brokken@rug.nl)
oxref V0.91.00 2012-2013

CREATED Sun, 11 Aug 2013 16:48:11 +0000
CROSS REFERENCE FOR: -fxs tmp/libmodules.a 
----------------------------------------------------------------------

accept(Options::PathType, char const*)
  Full name: Options::accept(Options::PathType, char const*)
  Source:    accept.cc 
  Used By:
    assign.cc: Options::assign(std::string*, Options::PathType, char const*)

accept(unsigned int)
  Full name: ScannerBase::accept(unsigned int)
  Source:    lex.cc 
  Used By:
    handleeolncomment.cc: Scanner::handleEOLNcomment()
    handlemulti.cc: Scanner::handleMulti(int)
    block.cc: Parser::block()

actions(std::ostream&) const
  Full name: Generator::actions(std::ostream&) const
  Source:    actions.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

activate(std::string const&)
  Full name: StartConditions::activate(std::string const&)
  Source:    activate.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

add(bool, Pattern const&, Block const&)
  Full name: Rules::add(bool, Pattern const&, Block const&)
  Source:    add.cc 
  Used By:
    addrule.cc: Parser::addRule(Pattern const&, bool)

add(std::string const&)
  Full name: StartConditions::add(std::string const&)
  Source:    add.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

add(std::string const&)
  Full name: Ranges::add(std::string const&)
  Source:    add.cc 
  Used By:
    add3.cc: Ranges::add(unsigned int)
    inspectstate.cc: Ranges::inspectState(State const&)

add(unsigned int)
  Full name: StartConditions::add(unsigned int)
  Source:    add2.cc 
  Used By:
    add.cc: Rules::add(bool, Pattern const&, Block const&)

add(unsigned int)
  Full name: Ranges::add(unsigned int)
  Source:    add3.cc 
  Used By:
    inspectstate.cc: Ranges::inspectState(State const&)

addChars(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int, unsigned int) const
  Full name: CharClass::addChars(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int, unsigned int) const
  Source:    addchars.cc 
  Used By:
    addrange.cc: CharClass::addRange(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int) const

addDefinition(std::string const&, std::string const&)
  Full name: Scanner::addDefinition(std::string const&, std::string const&)
  Source:    adddefinition.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

addIndices(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int, unsigned int) const
  Full name: CharClass::addIndices(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int, unsigned int) const
  Source:    addindices.cc 
  Used By:
    set.cc: CharClass::set() const

addRange(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int) const
  Full name: CharClass::addRange(std::set<char, std::less<char>, std::allocator<char> >&, unsigned int) const
  Source:    addrange.cc 
  Used By:
    set.cc: CharClass::set() const

addRule(Pattern const&, bool)
  Full name: Parser::addRule(Pattern const&, bool)
  Source:    addrule.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

alternatives(States&, Pattern const&, Pattern const&)
  Full name: Pattern::alternatives(States&, Pattern const&, Pattern const&)
  Source:    alternatives.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

assign(std::string*, Options::PathType, char const*)
  Full name: Options::assign(std::string*, Options::PathType, char const*)
  Source:    assign.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

baseClassH(std::ostream&) const
  Full name: Generator::baseClassH(std::ostream&) const
  Source:    baseclassh.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

baseclassHeaderName() const
  Full name: Options::baseclassHeaderName() const
  Source:    baseclassheadername.cc 
  Used By:
    baseclassh.cc: Generator::baseClassH(std::ostream&) const
    classheader.cc: Generator::classHeader() const

baseIncludes(std::ostream&) const
  Full name: Generator::baseIncludes(std::ostream&) const
  Source:    baseincludes.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

block()
  Full name: Parser::block()
  Source:    block.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

boln()
  Full name: Parser::boln()
  Source:    boln.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)
  Full name: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)
  Source:    build.cc 
  Used By:
    build.cc: DFAs::build()

caseCheck(std::ostream&) const
  Full name: Generator::caseCheck(std::ostream&) const
  Source:    casecheck.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

characterClass(States&, CharClass const&)
  Full name: Pattern::characterClass(States&, CharClass const&)
  Source:    characterclass.cc 
  Used By:
    parse.cc: Parser::executeAction(int)
    dot.cc: Pattern::dot(States&)

charsetToRanges(StateData&, unsigned int*)
  Full name: Ranges::charsetToRanges(StateData&, unsigned int*)
  Source:    charsettoranges.cc 
  Used By:
    finalizestate.cc: Ranges::finalizeState(State&)

chCollision(unsigned char, unsigned char&, unsigned int const*)
  Full name: Ranges::chCollision(unsigned char, unsigned char&, unsigned int const*)
  Source:    chcollision.cc 
  Used By:
    collision.cc: Ranges::collision(std::string const&, unsigned int const*)

classH(std::ostream&) const
  Full name: Generator::classH(std::ostream&) const
  Source:    classh.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

classHead(std::ostream&) const
  Full name: Generator::classHead(std::ostream&) const
  Source:    classhead.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

classHeaderName() const
  Full name: Options::classHeaderName() const
  Source:    classheadername.cc 
  Used By:
    classh.cc: Generator::classH(std::ostream&) const
    implementationheader.cc: Generator::implementationHeader() const

classIH(std::ostream&) const
  Full name: Generator::classIH(std::ostream&) const
  Source:    classih.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

clear()
  Full name: Block::clear()
  Source:    clear.cc 
  Used By:
    open.cc: Block::open(unsigned int, std::string const&)
    noactions.cc: Rules::noActions()

clearUsed()
  Full name: Ranges::clearUsed()
  Source:    clearused.cc 
  Used By:
    finalizestates.cc: Ranges::finalizeStates()
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

close()
  Full name: Block::close()
  Source:    close.cc 
  Used By:
    block.cc: Parser::block()

collect(unsigned int)
  Full name: States::collect(unsigned int)
  Source:    collect.cc 
  Used By:
    concatenate.cc: Pattern::concatenate(States&, Pattern const&, Pattern const&)

collision(std::string const&, unsigned int const*)
  Full name: Ranges::collision(std::string const&, unsigned int const*)
  Source:    collision.cc 
  Used By:
    update.cc: Ranges::update(std::string const&, unsigned int const*)

computeTailCounts()
  Full name: DFA::computeTailCounts()
  Source:    computetailcounts.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

concatenate(CharClass const&)
  Full name: CharClass::concatenate(CharClass const&)
  Source:    concatenate.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

concatenate(States&, Pattern const&, Pattern const&)
  Full name: Pattern::concatenate(States&, Pattern const&, Pattern const&)
  Source:    concatenate.cc 
  Used By:
    lookahead.cc: Parser::lookahead(Pattern const&, Pattern const&)
    parse.cc: Parser::executeAction(int)
    join.cc: Pattern::join(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)

contains(unsigned int) const
  Full name: State::contains(unsigned int) const
  Source:    contains.cc 
  Used By:
    transit.cc: DFARow::transit(unsigned int, unsigned int, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&)

copy(States&, Pattern&, unsigned int, unsigned int)
  Full name: Pattern::copy(States&, Pattern&, unsigned int, unsigned int)
  Source:    copy.cc 
  Used By:
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)

copyPattern(States&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Full name: Pattern::copyPattern(States&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Source:    copypattern1.cc 
  Used By:
    copy.cc: Pattern::copy(States&, Pattern&, unsigned int, unsigned int)

copyPattern(States&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Full name: Pattern::copyPattern(States&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Source:    copypattern2.cc 
  Used By:
    optionalpatterns.cc: Pattern::optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)

countRanges(unsigned int&, std::vector<unsigned int, std::allocator<unsigned int> >&)
  Full name: Ranges::countRanges(unsigned int&, std::vector<unsigned int, std::allocator<unsigned int> >&)
  Source:    countranges.cc 
  Used By:
    update.cc: Ranges::update(std::string const&, unsigned int const*)

debug(std::ostream&) const
  Full name: Generator::debug(std::ostream&) const
  Source:    debug.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

debugDecl(std::ostream&) const
  Full name: Generator::debugDecl(std::ostream&) const
  Source:    debugdecl.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

debugFunctions(std::ostream&) const
  Full name: Generator::debugFunctions(std::ostream&) const
  Source:    debugfunctions.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

declarations(std::ostream&) const
  Full name: Generator::declarations(std::ostream&) const
  Source:    declarations.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

determineTailCount(TailCount&, unsigned int, TailCount*, unsigned int)
  Full name: DFA::determineTailCount(TailCount&, unsigned int, TailCount*, unsigned int)
  Source:    determinetailcount.cc 
  Used By:
    transittailcount.cc: DFA::transitTailCount(std::pair<unsigned int const, unsigned int> const&, TailCount*, unsigned int)
    visittailcount.cc: DFA::visitTailCount(TailCount&)

DFA(Ranges&, Rules&, States&)
  Full name: DFA::DFA(Ranges&, Rules&, States&)
  Source:    dfa1.cc 
  Used By:
    build.cc: DFAs::build()

dfa(std::pair<std::string, DFA> const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&, std::vector<std::string, std::allocator<std::string> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)
  Full name: Generator::dfa(std::pair<std::string, DFA> const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&, std::vector<std::string, std::allocator<std::string> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)
  Source:    dfa.cc 
  Used By:
    dfas.cc: Generator::dfas(std::ostream&) const

DFAbases(std::ostream&) const
  Full name: Generator::DFAbases(std::ostream&) const
  Source:    dfabases.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

dfaRFCs(DFARow const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Full name: Generator::dfaRFCs(DFARow const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Source:    dfarfcs.cc 
  Used By:
    dfarow.cc: Generator::dfaRow(DFARow const&, unsigned int&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)

dfaRow(DFARow const&, unsigned int&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Full name: Generator::dfaRow(DFARow const&, unsigned int&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Source:    dfarow.cc 
  Used By:
    dfa.cc: Generator::dfa(std::pair<std::string, DFA> const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&, std::vector<std::string, std::allocator<std::string> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)

DFARow(Rules&, States&, std::vector<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >, std::allocator<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > > >&, unsigned int, Ranges&)
  Full name: DFARow::DFARow(Rules&, States&, std::vector<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >, std::allocator<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > > >&, unsigned int, Ranges&)
  Source:    dfarow1.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

dfas(std::ostream&) const
  Full name: Generator::dfas(std::ostream&) const
  Source:    dfas.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

dfaTransitions(DFARow const&, std::ostream&)
  Full name: Generator::dfaTransitions(DFARow const&, std::ostream&)
  Source:    dfatransitions.cc 
  Used By:
    dfarow.cc: Generator::dfaRow(DFARow const&, unsigned int&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)

dflush__(std::ostream&)
  Full name: ParserBase::dflush__(std::ostream&)
  Source:    parse.cc 
  Used By:
    lookahead.cc: GLOBALS lookahead.cc 2lookahead.o
    quotes.cc: Parser::quotes()

difference(CharClass const&, CharClass const&)
  Full name: CharClass::difference(CharClass const&, CharClass const&)
  Source:    difference.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

dollar()
  Full name: Parser::dollar()
  Source:    dollar.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

dot(States&)
  Full name: Pattern::dot(States&)
  Source:    dot.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

dup(State const&, unsigned int, unsigned int)
  Full name: State::dup(State const&, unsigned int, unsigned int)
  Source:    dup.cc 
  Used By:
    duppattern.cc: Pattern::dupPattern(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, States&, unsigned int)

dupPattern(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, States&, unsigned int)
  Full name: Pattern::dupPattern(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, States&, unsigned int)
  Source:    duppattern.cc 
  Used By:
    copypattern1.cc: Pattern::copyPattern(States&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    copypattern2.cc: Pattern::copyPattern(States&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)

eClosure(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&) const
  Full name: States::eClosure(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&) const
  Source:    eclosure.cc 
  Used By:
    transitions.cc: DFARow::transitions()
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

elements(std::string const&, unsigned int)
  Full name: CharClass::elements(std::string const&, unsigned int)
  Source:    elements.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

eof(States&)
  Full name: Pattern::eof(States&)
  Source:    eof.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

eolnDollar()
  Full name: Parser::eolnDollar()
  Source:    eolndollar.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

error(char const*)
  Full name: Parser::error(char const*)
  Source:    error.cc 
  Used By:
    parse.cc: Parser::errorRecovery()

escape(States&, std::string const&)
  Full name: Pattern::escape(States&, std::string const&)
  Source:    escape.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

escape(std::string const&)
  Full name: CharClass::escape(std::string const&)
  Source:    escape.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

exact(std::string const&)
  Full name: Interval::exact(std::string const&)
  Source:    exact.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

factory(unsigned char, unsigned int)
  Full name: State::factory(unsigned char, unsigned int)
  Source:    factory3.cc 
  Used By:
    escape.cc: Pattern::escape(States&, std::string const&)
    rawtext.cc: Pattern::rawText(States&, std::string const&)

factory(unsigned int, std::string const&, unsigned int, unsigned int)
  Full name: State::factory(unsigned int, std::string const&, unsigned int, unsigned int)
  Source:    factory2.cc 
  Used By:
    characterclass.cc: Pattern::characterClass(States&, CharClass const&)

factory(unsigned int, unsigned int, unsigned int)
  Full name: State::factory(unsigned int, unsigned int, unsigned int)
  Source:    factory1.cc 
  Used By:
    next2.cc: States::next2()
    next3.cc: States::next(unsigned int)
    alternatives.cc: Pattern::alternatives(States&, Pattern const&, Pattern const&)
    eof.cc: Pattern::eof(States&)
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    jumptoend.cc: Pattern::jumpToEnd(States&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&)
    plus.cc: Pattern::plus(States&, Pattern const&)
    questionmark.cc: Pattern::questionMark(States&, Pattern const&)
    rawtext.cc: Pattern::rawText(States&, std::string const&)
    star.cc: Pattern::star(States&, Pattern const&)

filename(std::string const&)
  Full name: Generator::filename(std::string const&)
  Source:    filename.cc 
  Used By:
    baseclassh.cc: Generator::baseClassH(std::ostream&) const
    classh.cc: Generator::classH(std::ostream&) const
    classih.cc: Generator::classIH(std::ostream&) const

filter(std::istream&, std::ostream&) const
  Full name: Generator::filter(std::istream&, std::ostream&) const
  Source:    filter.cc 
  Used By:
    baseclassheader.cc: Generator::baseclassHeader() const
    classheader.cc: Generator::classHeader() const
    implementationheader.cc: Generator::implementationHeader() const
    lexsource.cc: Generator::lexSource() const

finalizeState(State&)
  Full name: Ranges::finalizeState(State&)
  Source:    finalizestate.cc 
  Used By:
    finalizestates.cc: Ranges::finalizeStates()

find(std::string const&) const
  Full name: DFAs::find(std::string const&) const
  Source:    find.cc 
  Used By:
    dfas.cc: Generator::dfas(std::ostream&) const

findRange(unsigned int) const
  Full name: CharClass::findRange(unsigned int) const
  Source:    findrange.cc 
  Used By:
    set.cc: CharClass::set() const

grep(std::string const&, std::string const&) const
  Full name: Generator::grep(std::string const&, std::string const&) const
  Source:    grep.cc 
  Used By:
    warnexisting.cc: Generator::warnExisting(std::string const&, std::string const&, std::string const&, std::string const&) const

handleCharAfterBlanks()
  Full name: Scanner::handleCharAfterBlanks()
  Source:    handlecharafterblanks.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

handleDquote()
  Full name: Scanner::handleDquote()
  Source:    handledquote.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

handleEOLNcomment()
  Full name: Scanner::handleEOLNcomment()
  Source:    handleeolncomment.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

handleMulti(int)
  Full name: Scanner::handleMulti(int)
  Source:    handlemulti.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

handleOpenBracket()
  Full name: Scanner::handleOpenBracket()
  Source:    handleopenbracket.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

handleStdComment()
  Full name: Scanner::handleStdComment()
  Source:    handlestdcomment.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

implementationHeaderName() const
  Full name: Options::implementationHeaderName() const
  Source:    implementationheadername.cc 
  Used By:
    classih.cc: Generator::classIH(std::ostream&) const

inlineLexFunction(std::ostream&) const
  Full name: Generator::inlineLexFunction(std::ostream&) const
  Source:    inlinelexfunction.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

inputImplementation(std::ostream&) const
  Full name: Generator::inputImplementation(std::ostream&) const
  Source:    inputimplementation.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

inputInterface(std::ostream&) const
  Full name: Generator::inputInterface(std::ostream&) const
  Source:    inputinterface.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

insert(std::ostream&) const
  Full name: Generator::insert(std::ostream&) const
  Source:    insert.cc 
  Used By:
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

insertSstream(std::ostream&) const
  Full name: Generator::insertSstream(std::ostream&) const
  Source:    insertsstream.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

inspectRows(std::vector<unsigned int, std::allocator<unsigned int> >&)
  Full name: DFA::inspectRows(std::vector<unsigned int, std::allocator<unsigned int> >&)
  Source:    inspectrows.cc 
  Used By:
    keepuniquerows.cc: DFA::keepUniqueRows()

inspectState(State const&)
  Full name: Ranges::inspectState(State const&)
  Source:    inspectstate.cc 
  Used By:
    determinesubsets.cc: Ranges::determineSubsets()

instance()
  Full name: Options::instance()
  Source:    instance.cc 
  Used By:
    dfa1.cc: DFA::DFA(Ranges&, Rules&, States&)
    setcasesensitive.cc: Scanner::setCaseSensitive()
    generator1.cc: Generator::Generator(Rules const&, Ranges const&, DFAs const&)
    parser1.cc: Parser::Parser(Rules&, States&)

interactiveDecl(std::ostream&) const
  Full name: Generator::interactiveDecl(std::ostream&) const
  Source:    interactivedecl.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

interactiveInit(std::ostream&) const
  Full name: Generator::interactiveInit(std::ostream&) const
  Source:    interactiveinit.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

interactiveLex(std::ostream&) const
  Full name: Generator::interactiveLex(std::ostream&) const
  Source:    interactivelex.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

interval(Pattern&, Interval const&)
  Full name: Parser::interval(Pattern&, Interval const&)
  Source:    interval.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

interval(States&, Pattern&, Interval const&)
  Full name: Pattern::interval(States&, Pattern&, Interval const&)
  Source:    interval.cc 
  Used By:
    interval.cc: Parser::interval(Pattern&, Interval const&)

join(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)
  Full name: Pattern::join(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)
  Source:    join.cc 
  Used By:
    optionalpatterns.cc: Pattern::optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    optrepeatlastpattern.cc: Pattern::optRepeatLastPattern(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)

jumpToEnd(States&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&)
  Full name: Pattern::jumpToEnd(States&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&)
  Source:    jumptoend.cc 
  Used By:
    optionalpatterns.cc: Pattern::optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)

keepUniqueRows()
  Full name: DFA::keepUniqueRows()
  Source:    keepuniquerows.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

keepViableTailCounts()
  Full name: DFA::keepViableTailCounts()
  Source:    keepviabletailcounts.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

keepViableTailCounts(DFARow&)
  Full name: DFARow::keepViableTailCounts(DFARow&)
  Source:    keepviabletailcounts.cc 
  Used By:
    keepviabletailcounts.cc: DFA::keepViableTailCounts()

key(std::ostream&) const
  Full name: Generator::key(std::ostream&) const
  Source:    key.cc 
  Used By:
    actions.cc: Generator::actions(std::ostream&) const
    baseclassh.cc: Generator::baseClassH(std::ostream&) const
    baseincludes.cc: Generator::baseIncludes(std::ostream&) const
    casecheck.cc: Generator::caseCheck(std::ostream&) const
    classh.cc: Generator::classH(std::ostream&) const
    classhead.cc: Generator::classHead(std::ostream&) const
    classih.cc: Generator::classIH(std::ostream&) const
    debug.cc: Generator::debug(std::ostream&) const
    debugdecl.cc: Generator::debugDecl(std::ostream&) const
    debugfunctions.cc: Generator::debugFunctions(std::ostream&) const
    inlinelexfunction.cc: Generator::inlineLexFunction(std::ostream&) const
    inputimplementation.cc: Generator::inputImplementation(std::ostream&) const
    inputinterface.cc: Generator::inputInterface(std::ostream&) const
    insertsstream.cc: Generator::insertSstream(std::ostream&) const
    interactivedecl.cc: Generator::interactiveDecl(std::ostream&) const
    interactiveinit.cc: Generator::interactiveInit(std::ostream&) const
    interactivelex.cc: Generator::interactiveLex(std::ostream&) const
    lexfunctiondecl.cc: Generator::lexFunctionDecl(std::ostream&) const
    namespaceclose.cc: Generator::namespaceClose(std::ostream&) const
    namespaceopen.cc: Generator::namespaceOpen(std::ostream&) const
    namespaceuse.cc: Generator::namespaceUse(std::ostream&) const
    print.cc: Generator::print(std::ostream&) const
    scannerconstructors.cc: Generator::scannerConstructors(std::ostream&) const
    startcondnames.cc: Generator::startCondNames(std::ostream&) const

lex()
  Full name: Parser::lex()
  Source:    lex.cc 
  Used By:
    parse.cc: Parser::nextToken()

lex__()
  Full name: Scanner::lex__()
  Source:    lex.cc 
  Used By:
    plex.cc: Scanner::pLex()
    block.cc: Parser::block()

lexFunctionDecl(std::ostream&) const
  Full name: Generator::lexFunctionDecl(std::ostream&) const
  Source:    lexfunctiondecl.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

lookahead(Pattern const&, Pattern const&)
  Full name: Parser::lookahead(Pattern const&, Pattern const&)
  Source:    lookahead.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

lowerBound(std::string const&)
  Full name: Interval::lowerBound(std::string const&)
  Source:    lowerbound.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

maybeSwitchStream()
  Full name: Scanner::maybeSwitchStream()
  Source:    maybeswitchstream.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

namespaceClose(std::ostream&) const
  Full name: Generator::namespaceClose(std::ostream&) const
  Source:    namespaceclose.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

namespaceOpen(std::ostream&) const
  Full name: Generator::namespaceOpen(std::ostream&) const
  Source:    namespaceopen.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

namespaceUse(std::ostream&) const
  Full name: Generator::namespaceUse(std::ostream&) const
  Source:    namespaceuse.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

negate() const
  Full name: CharClass::negate() const
  Source:    negate1.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

negate(std::set<char, std::less<char>, std::allocator<char> > const&)
  Full name: CharRange::negate(std::set<char, std::less<char>, std::allocator<char> > const&)
  Source:    negate.cc 
  Used By:
    predefined.cc: CharRange::predefined(std::string const&)
    negate1.cc: CharClass::negate() const

newDefinition()
  Full name: Scanner::newDefinition()
  Source:    newdefinition.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

next()
  Full name: States::next()
  Source:    next.cc 
  Used By:
    next2.cc: States::next2()
    next3.cc: States::next(unsigned int)
    copypattern2.cc: Pattern::copyPattern(States&, unsigned int, unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    duppattern.cc: Pattern::dupPattern(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >&, States&, unsigned int)
    questionmark.cc: Pattern::questionMark(States&, Pattern const&)

next(unsigned int)
  Full name: States::next(unsigned int)
  Source:    next3.cc 
  Used By:
    rawtext.cc: Pattern::rawText(States&, std::string const&)

next2()
  Full name: States::next2()
  Source:    next2.cc 
  Used By:
    alternatives.cc: Pattern::alternatives(States&, Pattern const&, Pattern const&)
    characterclass.cc: Pattern::characterClass(States&, CharClass const&)
    eof.cc: Pattern::eof(States&)
    escape.cc: Pattern::escape(States&, std::string const&)
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    plus.cc: Pattern::plus(States&, Pattern const&)
    rawtext.cc: Pattern::rawText(States&, std::string const&)
    star.cc: Pattern::star(States&, Pattern const&)

noActions()
  Full name: Rules::noActions()
  Source:    noactions.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

nUsed() const
  Full name: Ranges::nUsed() const
  Source:    nused.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, DFA const&)

open(unsigned int, std::string const&)
  Full name: Block::open(unsigned int, std::string const&)
  Source:    open.cc 
  Used By:
    block.cc: Parser::block()

operator()(char const*) const
  Full name: Options::operator()(char const*) const
  Source:    operatorfun2.cc 
  Used By:
    baseclassheader.cc: Generator::baseclassHeader() const

operator()(int) const
  Full name: Options::operator()(int) const
  Source:    operatorfun1.cc 
  Used By:
    construction.cc: Generator::construction(States const&)
    debug.cc: Generator::debug(std::ostream&) const
    debugdecl.cc: Generator::debugDecl(std::ostream&) const
    debugfunctions.cc: Generator::debugFunctions(std::ostream&) const
    parser1.cc: Parser::Parser(Rules&, States&)

operator*() const
  Full name: StartConditions::const_iterator::operator*() const
  Source:    operatorstar.cc 
  Used By:
    build.cc: DFAs::build()
    startcondnames.cc: Generator::startCondNames(std::ostream&) const

operator+=(std::string const&)
  Full name: Block::operator+=(std::string const&)
  Source:    operatorplusis.cc 
  Used By:
    block.cc: Parser::block()

operator<<(FBB::Table&, DFARow const&)
  Full name: operator<<(FBB::Table&, DFARow const&)
  Source:    operatorinsert.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, DFA const&)

operator<<(std::ostream&, DFA const&)
  Full name: operator<<(std::ostream&, DFA const&)
  Source:    operatorinsert.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)
    operatorinsert.cc: operator<<(std::ostream&, DFAs const&)

operator<<(std::ostream&, DFAs const&)
  Full name: operator<<(std::ostream&, DFAs const&)
  Source:    operatorinsert.cc 
  Used By:
    construction.cc: Generator::construction(States const&)

operator<<(std::ostream&, Ranges const&)
  Full name: operator<<(std::ostream&, Ranges const&)
  Source:    operatorinsert.cc 
  Used By:
    construction.cc: Generator::construction(States const&)

operator<<(std::ostream&, Rule const&)
  Full name: operator<<(std::ostream&, Rule const&)
  Source:    operatorinsert.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, Rules const&)

operator<<(std::ostream&, Rules const&)
  Full name: operator<<(std::ostream&, Rules const&)
  Source:    operatorinsert.cc 
  Used By:
    construction.cc: Generator::construction(States const&)

operator<<(std::ostream&, StartConditions const&)
  Full name: operator<<(std::ostream&, StartConditions const&)
  Source:    operatorinsert.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, Rules const&)

operator<<(std::ostream&, State const&)
  Full name: operator<<(std::ostream&, State const&)
  Source:    operatorinsert.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, States const&)

operator<<(std::ostream&, States const&)
  Full name: operator<<(std::ostream&, States const&)
  Source:    operatorinsert.cc 
  Used By:
    construction.cc: Generator::construction(States const&)

operator==(DFARow const&) const
  Full name: DFARow::operator==(DFARow const&) const
  Source:    operatorequal.cc 
  Used By:
    inspectrows.cc: DFA::inspectRows(std::vector<unsigned int, std::allocator<unsigned int> >&)

optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Full name: Pattern::optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Source:    optionalpatterns.cc 
  Used By:
    copy.cc: Pattern::copy(States&, Pattern&, unsigned int, unsigned int)

Options()
  Full name: Options::Options()
  Source:    options1.cc 
  Used By:
    instance.cc: Options::instance()

optRepeatLastPattern(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Full name: Pattern::optRepeatLastPattern(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
  Source:    optrepeatlastpattern.cc 
  Used By:
    copy.cc: Pattern::copy(States&, Pattern&, unsigned int, unsigned int)

outChar(std::ostream&, unsigned int)
  Full name: Ranges::outChar(std::ostream&, unsigned int)
  Source:    outchar.cc 
  Used By:
    operatorinsert.cc: operator<<(std::ostream&, Ranges const&)

outDFAbase(std::string const&, unsigned int)
  Full name: Generator::outDFAbase(std::string const&, unsigned int)
  Source:    outdfabase.cc 
  Used By:
    dfabases.cc: Generator::DFAbases(std::ostream&) const

outRFC(Generator::RuleFlagCount const&, std::ostream&, unsigned int&)
  Full name: Generator::outRFC(Generator::RuleFlagCount const&, std::ostream&, unsigned int&)
  Source:    outrfc.cc 
  Used By:
    rfcs.cc: Generator::rfcs(std::ostream&) const

ParserBase()
  Full name: ParserBase::ParserBase()
  Source:    parse.cc 
  Used By:
    parser1.cc: Parser::Parser(Rules&, States&)

Pattern(std::pair<unsigned int, unsigned int> const&)
  Full name: Pattern::Pattern(std::pair<unsigned int, unsigned int> const&)
  Source:    pattern1.cc 
  Used By:
    parse.cc: ParserBase::pushToken__(int)
    alternatives.cc: Pattern::alternatives(States&, Pattern const&, Pattern const&)
    characterclass.cc: Pattern::characterClass(States&, CharClass const&)
    concatenate.cc: Pattern::concatenate(States&, Pattern const&, Pattern const&)
    eof.cc: Pattern::eof(States&)
    escape.cc: Pattern::escape(States&, std::string const&)
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    join.cc: Pattern::join(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)
    optionalpatterns.cc: Pattern::optionalPatterns(States&, Pattern&, unsigned int, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    optrepeatlastpattern.cc: Pattern::optRepeatLastPattern(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    plus.cc: Pattern::plus(States&, Pattern const&)
    quantifier.cc: Pattern::quantifier(States&, Pattern const&, unsigned int)
    questionmark.cc: Pattern::questionMark(States&, Pattern const&)
    rawtext.cc: Pattern::rawText(States&, std::string const&)
    star.cc: Pattern::star(States&, Pattern const&)

pLex()
  Full name: Scanner::pLex()
  Source:    plex.cc 
  Used By:
    lex.cc: Parser::lex()

plus(States&, Pattern const&)
  Full name: Pattern::plus(States&, Pattern const&)
  Source:    plus.cc 
  Used By:
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    optrepeatlastpattern.cc: Pattern::optRepeatLastPattern(States&, Pattern&, unsigned int, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >&)
    quantifier.cc: Pattern::quantifier(States&, Pattern const&, unsigned int)

popSc(int)
  Full name: Scanner::popSc(int)
  Source:    popsc.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

popStream()
  Full name: Scanner::popStream()
  Source:    popstream.cc 
  Used By:
    lex.cc: Scanner::lex__()

popStream()
  Full name: ScannerBase::popStream()
  Source:    lex.cc 
  Used By:
    popstream.cc: Scanner::popStream()

predefined(std::string const&)
  Full name: CharRange::predefined(std::string const&)
  Source:    predefined.cc 
  Used By:
    predefined.cc: CharClass::predefined(std::string const&)

predefined(std::string const&)
  Full name: CharClass::predefined(std::string const&)
  Source:    predefined.cc 
  Used By:
    parse.cc: Parser::executeAction(int)
    dot.cc: Pattern::dot(States&)

print()
  Full name: Parser::print()
  Source:    print.cc 
  Used By:
    lex.cc: Parser::lex()
    parse.cc: Parser::nextToken()

print(std::ostream&) const
  Full name: Generator::print(std::ostream&) const
  Source:    print.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

probeTailCount(unsigned int)
  Full name: DFARow::probeTailCount(unsigned int)
  Source:    probetailcount.cc 
  Used By:
    dfarow1.cc: DFARow::DFARow(Rules&, States&, std::vector<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >, std::allocator<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > > >&, unsigned int, Ranges&)

push(ScannerBase::StartCondition__)
  Full name: Scanner::push(ScannerBase::StartCondition__)
  Source:    push.cc 
  Used By:
    handledquote.cc: Scanner::handleDquote()
    handlestdcomment.cc: Scanner::handleStdComment()
    newdefinition.cc: Scanner::newDefinition()
    scanner1.cc: Scanner::Scanner(std::string const&)
    parse.cc: Parser::executeAction(int)

pushNameExpansion()
  Full name: Scanner::pushNameExpansion()
  Source:    pushnameexpansion.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

pushStream(std::string const&)
  Full name: ScannerBase::pushStream(std::string const&)
  Source:    lex.cc 
  Used By:
    maybeswitchstream.cc: Scanner::maybeSwitchStream()

quantifier(States&, Pattern const&, unsigned int)
  Full name: Pattern::quantifier(States&, Pattern const&, unsigned int)
  Source:    quantifier.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

questionMark(States&, Pattern const&)
  Full name: Pattern::questionMark(States&, Pattern const&)
  Source:    questionmark.cc 
  Used By:
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    quantifier.cc: Pattern::quantifier(States&, Pattern const&, unsigned int)

quotes()
  Full name: Parser::quotes()
  Source:    quotes.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

range(std::string const&, std::string const&)
  Full name: Interval::range(std::string const&, std::string const&)
  Source:    range.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

Ranges(Ranges const&)
  Full name: Ranges::Ranges(Ranges const&)
  Source:    ranges2.cc 
  Used By:
    operatorassign.cc: Ranges::operator=(Ranges const&)

Ranges(Ranges&&)
  Full name: Ranges::Ranges(Ranges&&)
  Source:    ranges3.cc 
  Used By:
    operatorassign2.cc: Ranges::operator=(Ranges&&)

ranges(std::ostream&) const
  Full name: Generator::ranges(std::ostream&) const
  Source:    ranges.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

rawText(States&, std::string const&)
  Full name: Pattern::rawText(States&, std::string const&)
  Source:    rawtext.cc 
  Used By:
    boln.cc: Parser::boln()
    dollar.cc: Parser::dollar()
    eolndollar.cc: Parser::eolnDollar()
    parse.cc: Parser::executeAction(int)
    quotes.cc: Parser::quotes()

redo(unsigned int)
  Full name: ScannerBase::redo(unsigned int)
  Source:    lex.cc 
  Used By:
    handlecharafterblanks.cc: Scanner::handleCharAfterBlanks()

reRead(std::string const&, unsigned int)
  Full name: ScannerBase::Input::reRead(std::string const&, unsigned int)
  Source:    lex.cc 
  Used By:
    pushnameexpansion.cc: Scanner::pushNameExpansion()
    eolndollar.cc: Parser::eolnDollar()

reset()
  Full name: Parser::reset()
  Source:    reset.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

rfcs(std::ostream&) const
  Full name: Generator::rfcs(std::ostream&) const
  Source:    rfcs.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

Rule(States const&, bool, std::pair<unsigned int, unsigned int>, Block const&)
  Full name: Rule::Rule(States const&, bool, std::pair<unsigned int, unsigned int>, Block const&)
  Source:    rule1.cc 
  Used By:
    add.cc: Rules::add(bool, Pattern const&, Block const&)

ruleAction(Block const&, std::ostream&, unsigned int&) const
  Full name: Generator::ruleAction(Block const&, std::ostream&, unsigned int&) const
  Source:    ruleaction.cc 
  Used By:
    actions.cc: Generator::actions(std::ostream&) const

s_baseFlag
  Full name: Generator::s_baseFlag
  Source:    data.cc 
  Used By:
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

s_baseFlagSize
  Full name: Generator::s_baseFlagSize
  Source:    data.cc 
  Used By:
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

s_defaultClassName
  Full name: Options::s_defaultClassName
  Source:    data.cc 
  Used By:
    setaccessorvariables.cc: Options::setAccessorVariables()

s_defaultLexFunctionName
  Full name: Options::s_defaultLexFunctionName
  Source:    data.cc 
  Used By:
    setaccessorvariables.cc: Options::setAccessorVariables()

s_defaultSkeletonDirectory
  Full name: Options::s_defaultSkeletonDirectory
  Source:    data.cc 
  Used By:
    setaccessorvariables.cc: Options::setAccessorVariables()

s_dfaBase__
  Full name: ScannerBase::s_dfaBase__
  Source:    lex.cc 
  Used By:
    popsc.cc: Scanner::popSc(int)
    push.cc: Scanner::push(ScannerBase::StartCondition__)
    switchtoinitial.cc: Scanner::switchToINITIAL()

s_funHash
  Full name: CharRange::s_funHash
  Source:    data.cc 
  Used By:
    predefined.cc: CharRange::predefined(std::string const&)

s_hash
  Full name: CharRange::s_hash
  Source:    data.cc 
  Used By:
    predefined.cc: CharRange::predefined(std::string const&)

s_ignoreToken
  Full name: Parser::s_ignoreToken
  Source:    data.cc 
  Used By:
    parser1.cc: Parser::Parser(Rules&, States&)
    print.cc: Parser::print()

s_insert
  Full name: Generator::s_insert
  Source:    data.cc 
  Used By:
    insert.cc: Generator::insert(std::ostream&) const

s_lastMsg
  Full name: Parser::s_lastMsg
  Source:    data.cc 
  Used By:
    error.cc: Parser::error(char const*)
    reset.cc: Parser::reset()

s_namespaceBaseFlag
  Full name: Generator::s_namespaceBaseFlag
  Source:    data.cc 
  Used By:
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

s_namespaceBaseFlagSize
  Full name: Generator::s_namespaceBaseFlagSize
  Source:    data.cc 
  Used By:
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

s_options
  Full name: Options::s_options
  Source:    data.cc 
  Used By:
    instance.cc: Options::instance()

s_out__
  Full name: ParserBase::s_out__
  Source:    parse.cc 
  Used By:
    lookahead.cc: GLOBALS lookahead.cc 2lookahead.o
    quotes.cc: Parser::quotes()

s_regexCall
  Full name: Options::s_regexCall
  Source:    data.cc 
  Used By:
    interval.cc: Parser::interval(Pattern&, Interval const&)
    lookahead.cc: Parser::lookahead(Pattern const&, Pattern const&)
    parse.cc: Parser::executeAction(int)
    options1.cc: Options::Options()
    alternatives.cc: Pattern::alternatives(States&, Pattern const&, Pattern const&)
    concatenate.cc: Pattern::concatenate(States&, Pattern const&, Pattern const&)
    quantifier.cc: Pattern::quantifier(States&, Pattern const&, unsigned int)

s_verbose
  Full name: DFA::s_verbose
  Source:    data.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)
    dfa1.cc: DFA::DFA(Ranges&, Rules&, States&)
    keepuniquerows.cc: DFA::keepUniqueRows()
    setverbose.cc: DFA::setVerbose(bool)
    shrinkdfa.cc: DFA::shrinkDFA(std::vector<unsigned int, std::allocator<unsigned int> >&)

s_warnOptions
  Full name: Options::s_warnOptions
  Source:    data.cc 
  Used By:
    assign.cc: Options::assign(std::string*, Options::PathType, char const*)
    setaccessorvariables.cc: Options::setAccessorVariables()
    setclassname.cc: Options::setClassName()
    setoptionpath.cc: Options::setOptionPath(std::string*, int, std::string const&, char const*, char const*)

sameTransits(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > const&, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > const&)
  Full name: DFARow::sameTransits(std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > const&, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > const&)
  Source:    sametransits.cc 
  Used By:
    operatorequal.cc: DFARow::operator==(DFARow const&) const

Scanner(std::string const&)
  Full name: Scanner::Scanner(std::string const&)
  Source:    scanner1.cc 
  Used By:
    parser1.cc: Parser::Parser(Rules&, States&)

ScannerBase(std::string const&, std::string const&)
  Full name: ScannerBase::ScannerBase(std::string const&, std::string const&)
  Source:    lex.cc 
  Used By:
    scanner1.cc: Scanner::Scanner(std::string const&)

scannerConstructors(std::ostream&) const
  Full name: Generator::scannerConstructors(std::ostream&) const
  Source:    scannerconstructors.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

set() const
  Full name: CharClass::set() const
  Source:    set.cc 
  Used By:
    difference.cc: CharClass::difference(CharClass const&, CharClass const&)
    negate1.cc: CharClass::negate() const
    str.cc: CharClass::str() const
    unite.cc: CharClass::unite(CharClass const&, CharClass const&)

setAccessorVariables()
  Full name: Options::setAccessorVariables()
  Source:    setaccessorvariables.cc 
  Used By:
    cleanup.cc: Parser::cleanup()

setCaseSensitive()
  Full name: Scanner::setCaseSensitive()
  Source:    setcasesensitive.cc 
  Used By:
    reset.cc: Parser::reset()

setClassName()
  Full name: Options::setClassName()
  Source:    setclassname.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

setFilenames()
  Full name: Options::setFilenames()
  Source:    setfilenames.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

setFinal(unsigned int)
  Full name: DFARow::setFinal(unsigned int)
  Source:    setfinal.cc 
  Used By:
    transit.cc: DFARow::transit(unsigned int, unsigned int, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&)

setFlags(unsigned int, State::Flag)
  Full name: Parser::setFlags(unsigned int, State::Flag)
  Source:    setflags.cc 
  Used By:
    lookahead.cc: Parser::lookahead(Pattern const&, Pattern const&)

setIncTailCount(TailCount::Type, TailCount&)
  Full name: DFA::setIncTailCount(TailCount::Type, TailCount&)
  Source:    setinctailcount.cc 
  Used By:
    settailcount.cc: DFA::setTailCount(TailCount&, unsigned int, TailCount*, unsigned int)

setInitTailCount(TailCount::Type, TailCount&)
  Full name: DFA::setInitTailCount(TailCount::Type, TailCount&)
  Source:    setinittailcount.cc 
  Used By:
    settailcount.cc: DFA::setTailCount(TailCount&, unsigned int, TailCount*, unsigned int)

setLexFunctionName()
  Full name: Options::setLexFunctionName()
  Source:    setlexfunctionname.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

setLineTags(std::string const&) const
  Full name: Scanner::setLineTags(std::string const&) const
  Source:    setlinetags.cc 
  Used By:
    maybeswitchstream.cc: Scanner::maybeSwitchStream()
    popstream.cc: Scanner::popStream()
    scanner1.cc: Scanner::Scanner(std::string const&)

setNextTailCount(TailCount::Type, TailCount&, unsigned int, TailCount&, unsigned int)
  Full name: DFA::setNextTailCount(TailCount::Type, TailCount&, unsigned int, TailCount&, unsigned int)
  Source:    setnexttailcount.cc 
  Used By:
    settailcount.cc: DFA::setTailCount(TailCount&, unsigned int, TailCount*, unsigned int)

setOptionPath(std::string*, int, std::string const&, char const*, char const*)
  Full name: Options::setOptionPath(std::string*, int, std::string const&, char const*, char const*)
  Source:    setoptionpath.cc 
  Used By:
    setpathstrings.cc: Options::setPathStrings()

setPathStrings()
  Full name: Options::setPathStrings()
  Source:    setpathstrings.cc 
  Used By:
    cleanup.cc: Parser::cleanup()

setRule(unsigned int, unsigned int)
  Full name: Rules::setRule(unsigned int, unsigned int)
  Source:    setrule.cc 
  Used By:
    add.cc: Rules::add(bool, Pattern const&, Block const&)

setTailCount(TailCount&, unsigned int, TailCount*, unsigned int)
  Full name: DFA::setTailCount(TailCount&, unsigned int, TailCount*, unsigned int)
  Source:    settailcount.cc 
  Used By:
    determinetailcount.cc: DFA::determineTailCount(TailCount&, unsigned int, TailCount*, unsigned int)

showFilenames() const
  Full name: Options::showFilenames() const
  Source:    showfilenames.cc 
  Used By:
    cleanup.cc: Parser::cleanup()

shrinkDFA(std::vector<unsigned int, std::allocator<unsigned int> >&)
  Full name: DFA::shrinkDFA(std::vector<unsigned int, std::allocator<unsigned int> >&)
  Source:    shrinkdfa.cc 
  Used By:
    keepuniquerows.cc: DFA::keepUniqueRows()

star(States&, Pattern const&)
  Full name: Pattern::star(States&, Pattern const&)
  Source:    star.cc 
  Used By:
    interval.cc: Pattern::interval(States&, Pattern&, Interval const&)
    quantifier.cc: Pattern::quantifier(States&, Pattern const&, unsigned int)

StartConditions()
  Full name: StartConditions::StartConditions()
  Source:    startconditions1.cc 
  Used By:
    rules1.cc: Rules::Rules(States&)

startCondNames(std::ostream&) const
  Full name: Generator::startCondNames(std::ostream&) const
  Source:    startcondnames.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

State()
  Full name: State::State()
  Source:    state1.cc 
  Used By:
    next.cc: GLOBALS next.cc 11next.o
    states1.cc: States::States()

State(unsigned int, StateData*)
  Full name: State::State(unsigned int, StateData*)
  Source:    state3.cc 
  Used By:
    factory1.cc: State::factory(unsigned int, unsigned int, unsigned int)
    factory2.cc: State::factory(unsigned int, std::string const&, unsigned int, unsigned int)
    factory3.cc: State::factory(unsigned char, unsigned int)

StateData(unsigned int, unsigned int)
  Full name: StateData::StateData(unsigned int, unsigned int)
  Source:    statedata1.cc 
  Used By:
    factory1.cc: State::factory(unsigned int, unsigned int, unsigned int)
    factory3.cc: State::factory(unsigned char, unsigned int)
    vclone.cc: StateData::v_clone() const
    statestring1.cc: StateString::StateString(std::string const&, unsigned int, unsigned int)

StateString(std::string const&, unsigned int, unsigned int)
  Full name: StateString::StateString(std::string const&, unsigned int, unsigned int)
  Source:    statestring1.cc 
  Used By:
    factory2.cc: State::factory(unsigned int, std::string const&, unsigned int, unsigned int)
    vclone.cc: StateString::v_clone() const

storeRFC(TailCount const&, std::pair<unsigned int, unsigned int>&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Full name: Generator::storeRFC(TailCount const&, std::pair<unsigned int, unsigned int>&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)
  Source:    storerfc.cc 
  Used By:
    dfarfcs.cc: Generator::dfaRFCs(DFARow const&, std::ostream&, std::vector<Generator::RuleFlagCount, std::allocator<Generator::RuleFlagCount> >&)

str() const
  Full name: CharClass::str() const
  Source:    str.cc 
  Used By:
    characterclass.cc: Pattern::characterClass(States&, CharClass const&)

subsetCount()
  Full name: Ranges::subsetCount()
  Source:    subsetcount.cc 
  Used By:
    update.cc: Ranges::update(std::string const&, unsigned int const*)

switchToINITIAL()
  Full name: Scanner::switchToINITIAL()
  Source:    switchtoinitial.cc 
  Used By:
    lex.cc: Scanner::executeAction__(unsigned int)

symbol__(int) const
  Full name: ParserBase::symbol__(int) const
  Source:    parse.cc 
  Used By:
    print.cc: Parser::print()

tabulate(FBB::Table&) const
  Full name: DFARow::tabulate(FBB::Table&) const
  Source:    tabulate.cc 
  Used By:
    operatorinsert.cc: operator<<(FBB::Table&, DFARow const&)

tabulateAccepts(FBB::Table&) const
  Full name: DFARow::tabulateAccepts(FBB::Table&) const
  Source:    tabulateaccepts.cc 
  Used By:
    tabulate.cc: DFARow::tabulate(FBB::Table&) const

tabulateFinals(FBB::Table&) const
  Full name: DFARow::tabulateFinals(FBB::Table&) const
  Source:    tabulatefinals.cc 
  Used By:
    tabulate.cc: DFARow::tabulate(FBB::Table&) const

tabulateTransitions(FBB::Table&) const
  Full name: DFARow::tabulateTransitions(FBB::Table&) const
  Source:    tabulatetransitions.cc 
  Used By:
    tabulate.cc: DFARow::tabulate(FBB::Table&) const

tailCount(std::ostream&) const
  Full name: Generator::tailCount(std::ostream&) const
  Source:    tailcount.cc 
  Used By:
    data.cc: GLOBALS data.cc 21data.o

TailCount(unsigned int, State::Flag)
  Full name: TailCount::TailCount(unsigned int, State::Flag)
  Source:    tailcount1.cc 
  Used By:
    probetailcount.cc: DFARow::probeTailCount(unsigned int)

transit(unsigned int, unsigned int, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&)
  Full name: DFARow::transit(unsigned int, unsigned int, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >&)
  Source:    transit.cc 
  Used By:
    transitions.cc: DFARow::transitions()

transitions()
  Full name: DFARow::transitions()
  Source:    transitions.cc 
  Used By:
    build.cc: DFA::build(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)

transitTailCount(std::pair<unsigned int const, unsigned int> const&, TailCount*, unsigned int)
  Full name: DFA::transitTailCount(std::pair<unsigned int const, unsigned int> const&, TailCount*, unsigned int)
  Source:    transittailcount.cc 
  Used By:
    determinetailcount.cc: DFA::determineTailCount(TailCount&, unsigned int, TailCount*, unsigned int)

undelimit(std::string const&)
  Full name: Options::undelimit(std::string const&)
  Source:    undelimit.cc 
  Used By:
    assign.cc: Options::assign(std::string*, Options::PathType, char const*)
    setclassname.cc: Options::setClassName()
    setfilenames.cc: Options::setFilenames()
    setlexfunctionname.cc: Options::setLexFunctionName()

uniqueMap(std::vector<unsigned int, std::allocator<unsigned int> > const&)
  Full name: DFARow::uniqueMap(std::vector<unsigned int, std::allocator<unsigned int> > const&)
  Source:    uniquemap.cc 
  Used By:
    keepuniquerows.cc: DFA::keepUniqueRows()

unite(CharClass const&, CharClass const&)
  Full name: CharClass::unite(CharClass const&, CharClass const&)
  Source:    unite.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

update(std::string const&, unsigned int const*)
  Full name: Ranges::update(std::string const&, unsigned int const*)
  Source:    update.cc 
  Used By:
    add.cc: Ranges::add(std::string const&)

useAll()
  Full name: StartConditions::useAll()
  Source:    useall.cc 
  Used By:
    parse.cc: Parser::executeAction(int)

v_clone() const
  Full name: StateData::v_clone() const
  Source:    vclone.cc 
  Used By:
    destructor.cc: StateData::~StateData()

v_clone() const
  Full name: StateString::v_clone() const
  Source:    vclone.cc 
  Used By:
    contains.cc: State::contains(unsigned int) const
    dup.cc: State::dup(State const&, unsigned int, unsigned int)
    factory1.cc: State::factory(unsigned int, unsigned int, unsigned int)
    factory2.cc: State::factory(unsigned int, std::string const&, unsigned int, unsigned int)
    factory3.cc: State::factory(unsigned char, unsigned int)
    operatorinsert.cc: operator<<(std::ostream&, State const&)
    state1.cc: State::State()
    state2.cc: State::State(unsigned int)
    state3.cc: State::State(unsigned int, StateData*)
    add.cc: Ranges::add(std::string const&)
    add3.cc: Ranges::add(unsigned int)
    charsettoranges.cc: Ranges::charsetToRanges(StateData&, unsigned int*)
    chcollision.cc: Ranges::chCollision(unsigned char, unsigned char&, unsigned int const*)
    clearused.cc: Ranges::clearUsed()
    collision.cc: Ranges::collision(std::string const&, unsigned int const*)
    countranges.cc: Ranges::countRanges(unsigned int&, std::vector<unsigned int, std::allocator<unsigned int> >&)
    destructor.cc: Ranges::~Ranges()
    determinesubsets.cc: Ranges::determineSubsets()
    finalizestate.cc: Ranges::finalizeState(State&)
    finalizestates.cc: Ranges::finalizeStates()
    inspectstate.cc: Ranges::inspectState(State const&)
    nused.cc: Ranges::nUsed() const
    operatorassign.cc: Ranges::operator=(Ranges const&)
    operatorassign2.cc: Ranges::operator=(Ranges&&)
    operatorinsert.cc: operator<<(std::ostream&, Ranges const&)
    outchar.cc: Ranges::outChar(std::ostream&, unsigned int)
    ranges1.cc: Ranges::Ranges(States&, unsigned int)
    ranges2.cc: Ranges::Ranges(Ranges const&)
    ranges3.cc: Ranges::Ranges(Ranges&&)
    reassign.cc: Ranges::reassign(unsigned int&, std::vector<unsigned int, std::allocator<unsigned int> >&)
    subsetcount.cc: Ranges::subsetCount()
    update.cc: Ranges::update(std::string const&, unsigned int const*)
    statestring1.cc: StateString::StateString(std::string const&, unsigned int, unsigned int)

validRange(unsigned int) const
  Full name: CharClass::validRange(unsigned int) const
  Source:    validrange.cc 
  Used By:
    set.cc: CharClass::set() const

version
  Full name: version
  Source:    version.cc 
  Used By:
    usage.cc: usage(std::string const&)
    filter.cc: Generator::filter(std::istream&, std::ostream&) const

visitTailCount(TailCount&)
  Full name: DFA::visitTailCount(TailCount&)
  Source:    visittailcount.cc 
  Used By:
    computetailcounts.cc: DFA::computeTailCounts()

warnExisting(std::string const&, std::string const&, std::string const&, std::string const&) const
  Full name: Generator::warnExisting(std::string const&, std::string const&, std::string const&, std::string const&) const
  Source:    warnexisting.cc 
  Used By:
    classheader.cc: Generator::classHeader() const
    implementationheader.cc: Generator::implementationHeader() const

year
  Full name: year
  Source:    version.cc 
  Used By:
    usage.cc: usage(std::string const&)

~Ranges()
  Full name: Ranges::~Ranges()
  Source:    destructor.cc 
  Used By:
    operatorassign.cc: Ranges::operator=(Ranges const&)
    operatorassign2.cc: Ranges::operator=(Ranges&&)

~StateData()
  Full name: StateData::~StateData()
  Source:    destructor.cc 
  Used By:
    contains.cc: GLOBALS contains.cc 10contains.o
    dup.cc: GLOBALS dup.cc 10dup.o
    factory1.cc: GLOBALS factory1.cc 10factory1.o
    factory2.cc: GLOBALS factory2.cc 10factory2.o
    factory3.cc: GLOBALS factory3.cc 10factory3.o
    operatorinsert.cc: GLOBALS operatorinsert.cc 10operatorinsert.o
    state1.cc: GLOBALS state1.cc 10state1.o
    state2.cc: GLOBALS state2.cc 10state2.o
    state3.cc: GLOBALS state3.cc 10state3.o
    add.cc: GLOBALS add.cc 17add.o
    add3.cc: GLOBALS add3.cc 17add3.o
    charsettoranges.cc: GLOBALS charsettoranges.cc 17charsettoranges.o
    chcollision.cc: GLOBALS chcollision.cc 17chcollision.o
    clearused.cc: GLOBALS clearused.cc 17clearused.o
    collision.cc: GLOBALS collision.cc 17collision.o
    countranges.cc: GLOBALS countranges.cc 17countranges.o
    destructor.cc: GLOBALS destructor.cc 17destructor.o
    determinesubsets.cc: GLOBALS determinesubsets.cc 17determinesubsets.o
    finalizestate.cc: GLOBALS finalizestate.cc 17finalizestate.o
    finalizestates.cc: GLOBALS finalizestates.cc 17finalizestates.o
    inspectstate.cc: GLOBALS inspectstate.cc 17inspectstate.o
    nused.cc: GLOBALS nused.cc 17nused.o
    operatorassign.cc: GLOBALS operatorassign.cc 17operatorassign.o
    operatorassign2.cc: GLOBALS operatorassign2.cc 17operatorassign2.o
    operatorinsert.cc: GLOBALS operatorinsert.cc 17operatorinsert.o
    outchar.cc: GLOBALS outchar.cc 17outchar.o
    ranges1.cc: GLOBALS ranges1.cc 17ranges1.o
    ranges2.cc: GLOBALS ranges2.cc 17ranges2.o
    ranges3.cc: GLOBALS ranges3.cc 17ranges3.o
    reassign.cc: GLOBALS reassign.cc 17reassign.o
    subsetcount.cc: GLOBALS subsetcount.cc 17subsetcount.o
    update.cc: GLOBALS update.cc 17update.o
    statestring1.cc: GLOBALS statestring1.cc 9statestring1.o
    vclone.cc: StateString::v_clone() const


