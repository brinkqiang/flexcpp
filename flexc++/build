#!/usr/bin/icmake -qt/tmp/flexc++

#define LOGENV "FLEXCPP"

#include "icmconf"

list    g_log;
string  
    g_logPath = getenv(LOGENV)[1],
    g_logMark,          // unique-marker for g_log entries
    g_cwd;              // initial working directory

int g_echo = ON;        // MODIFIED, existing variable

int g_installing;       // set to 1 by install.
int g_lognr;            // unique-marker number counter for g_log entries

#include "icmake/cuteoln"
#include "icmake/backtick"
#include "icmake/setopt"
#include "icmake/run"
#include "icmake/mark"
#include "icmake/md"
#include "icmake/special"
#include "icmake/md5sum"
#include "icmake/findall"
#include "icmake/log"
#include "icmake/loglink"
#include "icmake/loginstall"
#include "icmake/logzip"
#include "icmake/logfile"
#include "icmake/writelog"
#include "icmake/readlog"
#include "icmake/remove"
#include "icmake/removedir"
#include "icmake/uninstall"
#include "icmake/precompileheaders"

#include "icmake/clean"
#include "icmake/manpage"
#include "icmake/manual"
#include "icmake/install"
#include "icmake/github"

void main(int argc, list argv)
{
    string option;
    string strip;

    if (argv[1] == "-q")
    {
        g_echo = OFF;
        argv -= (list)"-q";
    }

    echo(g_echo);
    g_cwd = chdir(".");

    option = argv[1];

    if (option == "clean")
        clean(0);

    if (option == "distclean")
        clean(1);

    if (option == "install")
        install(argv[2]);

    if (option != "")
        special();

    if (option == "uninstall")
        uninstall();

    if (option == "github")
        github();

    if (option == "man")
        manpage();

    if (option == "manual")
        manual();

    if (option == "library")
    {
        precompileHeaders();
        run("icmbuild library");
        exit(0);
    }

    if (argv[2] == "strip")
        strip = "strip";
    
    if (option == "program")
    {
        precompileHeaders();
        run("icmbuild program " + strip);
        exit(0);
    }

    if (option == "oxref")
    {
        run("icmbuild program " + strip);
        run("oxref -fxs tmp/lib" LIBRARY ".a > " PROGRAM ".xref");
        exit(0);
    }

    if (option == "scanner")
    {
        chdir("scanner");
        run("./newscanner");
        chdir("..");
        run("icmbuild program " + strip);
        exit(0);
    }

    printf("Usage: build [-q] what\n"
        "Where\n"
        "   -q:   run quietly, do not show executed commands\n"
        "`what' is one of:\n"
        "   clean                - clean up remnants of previous "
                                                            "compilations\n"
        "   distclean            - clean + fully remove tmp/\n"
        "   library              - build " PROGRAM "'s library\n"
        "   man                  - build the man-page (requires Yodl)\n"
        "   manual               - build the manual (requires Yodl)\n"
        "   program [strip]      - build " PROGRAM " (optionally strip the\n"
        "                          executable)\n"
        "   oxref [strip]        - same a `program', also builds xref file\n"
        "                          using oxref\n"
        "   scanner [strip]      - build new scanner, then 'build program'\n"
        "   install [base]       - install the software in the locations\n"
        "                          defined in the INSTALL.im file,\n"
        "                          optionally below [base]\n"
        "   uninstall            - remove installed files and empty "
                                                            "directories\n"
        "   github               - prepare github's gh-pages update\n"
        "                          (internal use only)\n"
        "\n"
    );
    exit(0);
}
