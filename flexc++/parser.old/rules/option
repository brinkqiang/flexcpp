option:
    inputinterface_m '=' STRING
    {
        d_options.setInputInterfacePath(d_scanner.matched());
    }
|
    inputimplementation_m '=' STRING
    {
        d_options.setInputImplementationPath(d_scanner.matched());
    }
|
    classname_m '=' STRING
    {
        d_options.setClassName(d_scanner.matched());
    }
|
    lexfunctionname_m '=' STRING
    {
        d_options.setLexFunctionName(d_scanner.matched());
    }
|
    baseclassheader_m '=' STRING
    {
        d_options.setBaseClassHeaderPath(d_scanner.matched());
    }
|
    classheader_m '=' STRING
    {
        d_options.setClassHeaderPath(d_scanner.matched());
    }
|
    implementationheader_m '=' STRING
    {
        d_options.setImplementationHeaderPath(d_scanner.matched());
    }
|
    lexsource_m '=' STRING
    {
        d_options.setLexSourcePath(d_scanner.matched());
    }
|
    skeleton_directory_m '=' STRING
    {
        d_options.setSkeletonDirectory(d_scanner.matched());
    }
|
    namespace_m '=' STRING
    {
        d_options.setNameSpace(d_scanner.matched());
    }
|
    INTERACTIVE
    {
        d_options.setInteractive();
    }
|
    DEBUG opt_debugnamelist
|
    DEBUG_STEPS opt_steprange
|
    NOLINES
    {
        d_options.setLines(false);
    }
//|
//    error    
;

opt_debugnamelist:
    debugnamelist_m '=' debugnamelist
|
    {
        d_options.setDebug();
    }
;

debugnamelist:
    debugnamelist opt_comma debugname
|
    debugname
;

opt_comma:
    ','
|
    // empty
;

debugname:
    NAME
    {
        d_options.setDebug(d_scanner.matched());
    }
;

opt_steprange:
    debugsteps_m '=' firststep opt_laststep
|
    {
        d_options.setStepRange();
    }
;

firststep:
    DECIMAL
    {
        d_options.setStepRange(d_scanner.matched());
    }
;

opt_laststep:
    // empty
|
    DECIMAL
    {
        d_options.setLastStep(d_scanner.matched());
    }
;
